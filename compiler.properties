############################################################
# Compiler Properties
#
# Sets the default values of arguments.
# See lib.properties to set standard library path.
############################################################

# Debug [true, false]
# true:		Object files use fully-qualified names for symbols
# false:	Object files use numeric names for symbols
# Overriden to 'true' by the '-d' command-line argument
debug = false

# Entry Function [function name]
# Specifies the first function executed
# Overridden by the '-e' command-line argument
entry = main

# Output Path [directory]
# Specifies the directory for output object files
# Overridden by the '-o' command-line argument
#outputPath = 

# UIR Path [directory]
# If not empty, a human-readable form of the unoptimized IR is output to this directory
# Applies to the 'ir' compiler
# Overridden by the '-irfu' command-line argument
#uirPath = 

# IIR Path [directory]
# If not empty, a human-readable form of the IR is output after each optimization pass to this directory
# Applies to the 'ir' compiler
# Overridden by the '-irfi' command-line argument
#iirPath = 

# OIR Path [directory]
# If not empty, a human-readable form of the optimized IR is output to this drectory
# Applies to the 'ir' compiler
# Overridden by the '-irfo' command-line argument
#oirPath = 

# AASM Path [directory]
# If not empty, a human-readable form of the abstract assembly is output to this directory
# Applies to the 'ir' compiler
# Overridden by the '-asmfa' command-line argument
#aasmPath = 

# ASM Path [directory]
# If not empty, the final assembly is output to this directory
# Applies to the 'ir' compiler
# Overridden by the '-asmfo' command-line argument
#asmPath = 

# Show AST CFG [true, false]
# true:		The control-flow graph of the abstract syntax tree for each function is rendered
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-cfg ast' command-line argument
showASTCFG = false

# Show UIR CFG [true, false]
# true:		The control-flow graph of the unoptimized IR for each function is rendered
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-cfg uir' command-line argument
showUIRCFG = false

# Show IIR CFG [true, false]
# true:		The control-flow graph of each function is rendered after each optimization pass
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-cfg iir' command-line argument
showIIRCFG = false

# Show OIR CFG [true, false]
# true:		The control-flow graph of the optimized IR for each function is rendered
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-cfg oir' command-line argument
showOIRCFG = false

# Show ISel DAG [true, false]
# true:		The directed acyclic graph used for instruction selection for each basic block is rendered
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-dag isel' command-line argument
showISelDAG = false

# Show Uncolored RAIG [true, false]
# true:		Each iteration of the uncolored register allocation interference graph for each function is rendered
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-raig uncolored' command-line argument
showRAIGUncolored = false

# Show Colored RAIG [true, false]
# true:		The colored register allocation interference graph for each function is rendered
# false:	The graph is not rendered
# Applies to the 'ir' compiler
# Overridden to 'true' by the '-raig colored' command-line argument
showRAIGColored = false

# Compiler Name [ir, shit]
# ir:	The second version of the compiler is used. Fully featured with code optimization.
# shit:	The first version of the compiler is used. Missing features and does not optimize. Do not use this.
# Overridden by the '-c' command-line argument
compilerName = ir
