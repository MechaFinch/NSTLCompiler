package notsotiny.lang.compiler.codegen.alloc;

import java.util.EnumSet;
import java.util.Set;

import notsotiny.asm.Register;
import notsotiny.lang.ir.parts.IRType;

/**
 * A register class representing requirements a register must have to be used
 * for a given local
 */
public enum RARegisterClass {
    // Basic classes
    I8          (IRType.I8, EnumSet.of(Register.AH, Register.AL, Register.BH, Register.BL,
                            Register.CH, Register.CL, Register.DH, Register.DL)),
    I16         (IRType.I16, EnumSet.of(Register.A, Register.B, Register.C, Register.D,
                             Register.I, Register.J, Register.K, Register.L)),
    I32         (IRType.I32, EnumSet.of(Register.DA, Register.AB, Register.BC, Register.CD,
                             Register.JI, Register.LK)),
    
    // Halvable classes
    I16_HALF    (IRType.I16, EnumSet.of(Register.A, Register.B, Register.C, Register.D)),
    // Because BP and SP are not allocatable, I32_HALF = I32
    
    // I32_QUARTER would be D:A, A:B, B:C, C:D
    // but cannot be generated by current patterns and is only applicable
    // in rare cases
    ;
    
    private IRType type;
    
    private Set<Register> registersInClass;
    
    private RARegisterClass(IRType type, Set<Register> registersInClass) {
        this.type = type;
        this.registersInClass = registersInClass;
    }
    
    /**
     * Gets the size of the register class
     * @return
     */
    public int size() {
        return this.registersInClass.size();
    }
    
    public Set<Register> registers() { return this.registersInClass; }
    public IRType type() { return this.type; }
}
