/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 4.2.1
 */

package notsotiny.lang.compiler.codegen.pattern;

import fr.cenotelie.hime.redist.Symbol;
import fr.cenotelie.hime.redist.lexer.Automaton;
import fr.cenotelie.hime.redist.lexer.ContextFreeLexer;

import java.io.InputStreamReader;

/**
 * Represents a lexer
 */
public class IselPatternLexer extends ContextFreeLexer {
    /**
     * The automaton for this lexer
     */
    private static final Automaton commonAutomaton = Automaton.find(IselPatternLexer.class, "IselPatternLexer.bin");
    /**
     * Contains the constant IDs for the terminals for this lexer
     */
    public static class ID {
        /**
         * The unique identifier for terminal SEPARATOR
         */
        public static final int TERMINAL_SEPARATOR = 0x0006;
        /**
         * The unique identifier for terminal IDENTIFIER
         */
        public static final int TERMINAL_IDENTIFIER = 0x0009;
        /**
         * The unique identifier for terminal NAME
         */
        public static final int TERMINAL_NAME = 0x000A;
        /**
         * The unique identifier for terminal NUMBER
         */
        public static final int TERMINAL_NUMBER = 0x000B;
        /**
         * The unique identifier for terminal TYPE
         */
        public static final int TERMINAL_TYPE = 0x000C;
    }
    /**
     * Contains the constant IDs for the contexts for this lexer
     */
    public static class Context {
        /**
         * The unique identifier for the default context
         */
        public static final int DEFAULT = 0;
    }
    /**
     * The collection of terminals matched by this lexer
     *
     * The terminals are in an order consistent with the automaton,
     * so that terminal indices in the automaton can be used to retrieve the terminals in this table
     */
    private static final Symbol[] terminals = {
        new Symbol(0x0001, "Îµ"),
        new Symbol(0x0002, "$"),
        new Symbol(0x0006, "SEPARATOR"),
        new Symbol(0x0009, "IDENTIFIER"),
        new Symbol(0x000A, "NAME"),
        new Symbol(0x000B, "NUMBER"),
        new Symbol(0x000C, "TYPE"),
        new Symbol(0x001B, ":"),
        new Symbol(0x001C, "|"),
        new Symbol(0x001F, ";"),
        new Symbol(0x0020, "->"),
        new Symbol(0x0021, "("),
        new Symbol(0x0024, ")"),
        new Symbol(0x0025, "\""),
        new Symbol(0x0027, ","),
        new Symbol(0x0028, "["),
        new Symbol(0x0029, "+"),
        new Symbol(0x002A, "]"),
        new Symbol(0x002B, "*") };
    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public IselPatternLexer(String input) {
        super(commonAutomaton, terminals, 0x0006, input);
    }
    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public IselPatternLexer(InputStreamReader input) {
        super(commonAutomaton, terminals, 0x0006, input);
    }
}
