/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 4.2.1
 */

package notsotiny.lang.parser;

import fr.cenotelie.hime.redist.Symbol;
import fr.cenotelie.hime.redist.lexer.Automaton;
import fr.cenotelie.hime.redist.lexer.ContextFreeLexer;

import java.io.InputStreamReader;

/**
 * Represents a lexer
 */
public class NstlgrammarLexer extends ContextFreeLexer {
    /**
     * The automaton for this lexer
     */
    private static final Automaton commonAutomaton = Automaton.find(NstlgrammarLexer.class, "NstlgrammarLexer.bin");
    /**
     * Contains the constant IDs for the terminals for this lexer
     */
    public static class ID {
        /**
         * The unique identifier for terminal SEPARATOR
         */
        public static final int TERMINAL_SEPARATOR = 0x0006;
        /**
         * The unique identifier for terminal SEMI
         */
        public static final int TERMINAL_SEMI = 0x0007;
        /**
         * The unique identifier for terminal COMMA
         */
        public static final int TERMINAL_COMMA = 0x0008;
        /**
         * The unique identifier for terminal OPEN_P
         */
        public static final int TERMINAL_OPEN_P = 0x0009;
        /**
         * The unique identifier for terminal CLOSE_P
         */
        public static final int TERMINAL_CLOSE_P = 0x000A;
        /**
         * The unique identifier for terminal DOT
         */
        public static final int TERMINAL_DOT = 0x000B;
        /**
         * The unique identifier for terminal COLON
         */
        public static final int TERMINAL_COLON = 0x000C;
        /**
         * The unique identifier for terminal ALPHANUMERIC
         */
        public static final int TERMINAL_ALPHANUMERIC = 0x0028;
        /**
         * The unique identifier for terminal LNAME
         */
        public static final int TERMINAL_LNAME = 0x002C;
        /**
         * The unique identifier for terminal NAME
         */
        public static final int TERMINAL_NAME = 0x002D;
        /**
         * The unique identifier for terminal INTEGER
         */
        public static final int TERMINAL_INTEGER = 0x002E;
        /**
         * The unique identifier for terminal KW_TYPE
         */
        public static final int TERMINAL_KW_TYPE = 0x002F;
        /**
         * The unique identifier for terminal KW_STRUCTURE
         */
        public static final int TERMINAL_KW_STRUCTURE = 0x0030;
        /**
         * The unique identifier for terminal KW_ARRAY
         */
        public static final int TERMINAL_KW_ARRAY = 0x0031;
        /**
         * The unique identifier for terminal KW_IS
         */
        public static final int TERMINAL_KW_IS = 0x0032;
        /**
         * The unique identifier for terminal KW_AS
         */
        public static final int TERMINAL_KW_AS = 0x0033;
        /**
         * The unique identifier for terminal KW_OF
         */
        public static final int TERMINAL_KW_OF = 0x0034;
        /**
         * The unique identifier for terminal KW_FUNCTION
         */
        public static final int TERMINAL_KW_FUNCTION = 0x0035;
        /**
         * The unique identifier for terminal KW_BEGIN
         */
        public static final int TERMINAL_KW_BEGIN = 0x0036;
        /**
         * The unique identifier for terminal KW_LIBRARY
         */
        public static final int TERMINAL_KW_LIBRARY = 0x0037;
        /**
         * The unique identifier for terminal KW_LIBNAME
         */
        public static final int TERMINAL_KW_LIBNAME = 0x0038;
        /**
         * The unique identifier for terminal KW_SIZE
         */
        public static final int TERMINAL_KW_SIZE = 0x0039;
        /**
         * The unique identifier for terminal KW_SIZEOF
         */
        public static final int TERMINAL_KW_SIZEOF = 0x003A;
        /**
         * The unique identifier for terminal KW_DEFINE
         */
        public static final int TERMINAL_KW_DEFINE = 0x003B;
        /**
         * The unique identifier for terminal KW_IF
         */
        public static final int TERMINAL_KW_IF = 0x003C;
        /**
         * The unique identifier for terminal KW_ELSE
         */
        public static final int TERMINAL_KW_ELSE = 0x003D;
        /**
         * The unique identifier for terminal KW_ELSEIF
         */
        public static final int TERMINAL_KW_ELSEIF = 0x003E;
        /**
         * The unique identifier for terminal KW_POINTER
         */
        public static final int TERMINAL_KW_POINTER = 0x003F;
        /**
         * The unique identifier for terminal KW_WITH
         */
        public static final int TERMINAL_KW_WITH = 0x0040;
        /**
         * The unique identifier for terminal KW_RETURN
         */
        public static final int TERMINAL_KW_RETURN = 0x0041;
        /**
         * The unique identifier for terminal KW_RETURNS
         */
        public static final int TERMINAL_KW_RETURNS = 0x0042;
        /**
         * The unique identifier for terminal KW_WHILE
         */
        public static final int TERMINAL_KW_WHILE = 0x0043;
        /**
         * The unique identifier for terminal KW_DO
         */
        public static final int TERMINAL_KW_DO = 0x0044;
        /**
         * The unique identifier for terminal KW_THEN
         */
        public static final int TERMINAL_KW_THEN = 0x0045;
        /**
         * The unique identifier for terminal KW_END
         */
        public static final int TERMINAL_KW_END = 0x0046;
        /**
         * The unique identifier for terminal KW_EXTERNAL
         */
        public static final int TERMINAL_KW_EXTERNAL = 0x0047;
        /**
         * The unique identifier for terminal KW_GETS
         */
        public static final int TERMINAL_KW_GETS = 0x0048;
        /**
         * The unique identifier for terminal KW_INDEX
         */
        public static final int TERMINAL_KW_INDEX = 0x0049;
        /**
         * The unique identifier for terminal KW_CONSTANT
         */
        public static final int TERMINAL_KW_CONSTANT = 0x004A;
        /**
         * The unique identifier for terminal KW_VARIABLE
         */
        public static final int TERMINAL_KW_VARIABLE = 0x004B;
        /**
         * The unique identifier for terminal KW_CALL
         */
        public static final int TERMINAL_KW_CALL = 0x004C;
        /**
         * The unique identifier for terminal KW_AT
         */
        public static final int TERMINAL_KW_AT = 0x004D;
        /**
         * The unique identifier for terminal KW_TO
         */
        public static final int TERMINAL_KW_TO = 0x004E;
        /**
         * The unique identifier for terminal KW_AND
         */
        public static final int TERMINAL_KW_AND = 0x004F;
        /**
         * The unique identifier for terminal KW_OR
         */
        public static final int TERMINAL_KW_OR = 0x0050;
        /**
         * The unique identifier for terminal KW_XOR
         */
        public static final int TERMINAL_KW_XOR = 0x0051;
        /**
         * The unique identifier for terminal KW_NOT
         */
        public static final int TERMINAL_KW_NOT = 0x0052;
        /**
         * The unique identifier for terminal KW_ROL
         */
        public static final int TERMINAL_KW_ROL = 0x0053;
        /**
         * The unique identifier for terminal KW_ROR
         */
        public static final int TERMINAL_KW_ROR = 0x0054;
        /**
         * The unique identifier for terminal KW_NONE
         */
        public static final int TERMINAL_KW_NONE = 0x0055;
        /**
         * The unique identifier for terminal KW_FROM
         */
        public static final int TERMINAL_KW_FROM = 0x0056;
        /**
         * The unique identifier for terminal KW_BREAK
         */
        public static final int TERMINAL_KW_BREAK = 0x0057;
        /**
         * The unique identifier for terminal KW_CONTINUE
         */
        public static final int TERMINAL_KW_CONTINUE = 0x0058;
        /**
         * The unique identifier for terminal KW_UNTIL
         */
        public static final int TERMINAL_KW_UNTIL = 0x0059;
        /**
         * The unique identifier for terminal KW_FOR
         */
        public static final int TERMINAL_KW_FOR = 0x005A;
        /**
         * The unique identifier for terminal OP_GREATER
         */
        public static final int TERMINAL_OP_GREATER = 0x005B;
        /**
         * The unique identifier for terminal OP_LESS
         */
        public static final int TERMINAL_OP_LESS = 0x005C;
        /**
         * The unique identifier for terminal OP_GREATER_EQUAL
         */
        public static final int TERMINAL_OP_GREATER_EQUAL = 0x005D;
        /**
         * The unique identifier for terminal OP_LESS_EQUAL
         */
        public static final int TERMINAL_OP_LESS_EQUAL = 0x005E;
        /**
         * The unique identifier for terminal OP_EQUAL
         */
        public static final int TERMINAL_OP_EQUAL = 0x005F;
        /**
         * The unique identifier for terminal OP_NOT_EQUAL
         */
        public static final int TERMINAL_OP_NOT_EQUAL = 0x0060;
        /**
         * The unique identifier for terminal OP_ADD
         */
        public static final int TERMINAL_OP_ADD = 0x0061;
        /**
         * The unique identifier for terminal OP_SUBTRACT
         */
        public static final int TERMINAL_OP_SUBTRACT = 0x0062;
        /**
         * The unique identifier for terminal OP_MULTIPLY
         */
        public static final int TERMINAL_OP_MULTIPLY = 0x0063;
        /**
         * The unique identifier for terminal OP_DIVIDE
         */
        public static final int TERMINAL_OP_DIVIDE = 0x0064;
        /**
         * The unique identifier for terminal OP_REMAINDER
         */
        public static final int TERMINAL_OP_REMAINDER = 0x0065;
        /**
         * The unique identifier for terminal OP_SHIFT_LEFT
         */
        public static final int TERMINAL_OP_SHIFT_LEFT = 0x0066;
        /**
         * The unique identifier for terminal OP_ARITH_SHIFT_RIGHT
         */
        public static final int TERMINAL_OP_ARITH_SHIFT_RIGHT = 0x0067;
        /**
         * The unique identifier for terminal OP_LOGIC_SHIFT_RIGHT
         */
        public static final int TERMINAL_OP_LOGIC_SHIFT_RIGHT = 0x0068;
        /**
         * The unique identifier for terminal STRING
         */
        public static final int TERMINAL_STRING = 0x0069;
    }
    /**
     * Contains the constant IDs for the contexts for this lexer
     */
    public static class Context {
        /**
         * The unique identifier for the default context
         */
        public static final int DEFAULT = 0;
    }
    /**
     * The collection of terminals matched by this lexer
     *
     * The terminals are in an order consistent with the automaton,
     * so that terminal indices in the automaton can be used to retrieve the terminals in this table
     */
    private static final Symbol[] terminals = {
        new Symbol(0x0001, "ε"),
        new Symbol(0x0002, "$"),
        new Symbol(0x0006, "SEPARATOR"),
        new Symbol(0x0007, "SEMI"),
        new Symbol(0x0008, "COMMA"),
        new Symbol(0x0009, "OPEN_P"),
        new Symbol(0x000A, "CLOSE_P"),
        new Symbol(0x000B, "DOT"),
        new Symbol(0x000C, "COLON"),
        new Symbol(0x0028, "ALPHANUMERIC"),
        new Symbol(0x002C, "LNAME"),
        new Symbol(0x002D, "NAME"),
        new Symbol(0x002E, "INTEGER"),
        new Symbol(0x002F, "KW_TYPE"),
        new Symbol(0x0030, "KW_STRUCTURE"),
        new Symbol(0x0031, "KW_ARRAY"),
        new Symbol(0x0032, "KW_IS"),
        new Symbol(0x0033, "KW_AS"),
        new Symbol(0x0034, "KW_OF"),
        new Symbol(0x0035, "KW_FUNCTION"),
        new Symbol(0x0036, "KW_BEGIN"),
        new Symbol(0x0037, "KW_LIBRARY"),
        new Symbol(0x0038, "KW_LIBNAME"),
        new Symbol(0x0039, "KW_SIZE"),
        new Symbol(0x003A, "KW_SIZEOF"),
        new Symbol(0x003B, "KW_DEFINE"),
        new Symbol(0x003C, "KW_IF"),
        new Symbol(0x003D, "KW_ELSE"),
        new Symbol(0x003E, "KW_ELSEIF"),
        new Symbol(0x003F, "KW_POINTER"),
        new Symbol(0x0040, "KW_WITH"),
        new Symbol(0x0041, "KW_RETURN"),
        new Symbol(0x0042, "KW_RETURNS"),
        new Symbol(0x0043, "KW_WHILE"),
        new Symbol(0x0044, "KW_DO"),
        new Symbol(0x0045, "KW_THEN"),
        new Symbol(0x0046, "KW_END"),
        new Symbol(0x0047, "KW_EXTERNAL"),
        new Symbol(0x0048, "KW_GETS"),
        new Symbol(0x0049, "KW_INDEX"),
        new Symbol(0x004A, "KW_CONSTANT"),
        new Symbol(0x004B, "KW_VARIABLE"),
        new Symbol(0x004C, "KW_CALL"),
        new Symbol(0x004D, "KW_AT"),
        new Symbol(0x004E, "KW_TO"),
        new Symbol(0x004F, "KW_AND"),
        new Symbol(0x0050, "KW_OR"),
        new Symbol(0x0051, "KW_XOR"),
        new Symbol(0x0052, "KW_NOT"),
        new Symbol(0x0053, "KW_ROL"),
        new Symbol(0x0054, "KW_ROR"),
        new Symbol(0x0055, "KW_NONE"),
        new Symbol(0x0056, "KW_FROM"),
        new Symbol(0x0057, "KW_BREAK"),
        new Symbol(0x0058, "KW_CONTINUE"),
        new Symbol(0x0059, "KW_UNTIL"),
        new Symbol(0x005A, "KW_FOR"),
        new Symbol(0x005B, "OP_GREATER"),
        new Symbol(0x005C, "OP_LESS"),
        new Symbol(0x005D, "OP_GREATER_EQUAL"),
        new Symbol(0x005E, "OP_LESS_EQUAL"),
        new Symbol(0x005F, "OP_EQUAL"),
        new Symbol(0x0060, "OP_NOT_EQUAL"),
        new Symbol(0x0061, "OP_ADD"),
        new Symbol(0x0062, "OP_SUBTRACT"),
        new Symbol(0x0063, "OP_MULTIPLY"),
        new Symbol(0x0064, "OP_DIVIDE"),
        new Symbol(0x0065, "OP_REMAINDER"),
        new Symbol(0x0066, "OP_SHIFT_LEFT"),
        new Symbol(0x0067, "OP_ARITH_SHIFT_RIGHT"),
        new Symbol(0x0068, "OP_LOGIC_SHIFT_RIGHT"),
        new Symbol(0x0069, "STRING") };
    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public NstlgrammarLexer(String input) {
        super(commonAutomaton, terminals, 0x0006, input);
    }
    /**
     * Initializes a new instance of the lexer
     *
     * @param input The lexer's input
     */
    public NstlgrammarLexer(InputStreamReader input) {
        super(commonAutomaton, terminals, 0x0006, input);
    }
}
