/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 4.2.1
 */

package notsotiny.lang.parser;

import fr.cenotelie.hime.redist.ASTNode;
import fr.cenotelie.hime.redist.ParseResult;
import fr.cenotelie.hime.redist.SemanticAction;
import fr.cenotelie.hime.redist.SemanticBody;
import fr.cenotelie.hime.redist.Symbol;
import fr.cenotelie.hime.redist.parsers.InitializationException;
import fr.cenotelie.hime.redist.parsers.RNGLRAutomaton;
import fr.cenotelie.hime.redist.parsers.RNGLRParser;

import java.util.Map;

/**
 * Represents a parser
 */
public class NstlgrammarParser extends RNGLRParser {
    /**
     * The automaton for this parser
     */
    private static final RNGLRAutomaton COMMON_AUTOMATON = RNGLRAutomaton.find(NstlgrammarParser.class, "NstlgrammarParser.bin");
    /**
     * Contains the constant IDs for the variables and virtuals in this parser
     */
    public static class ID {
        /**
         * The unique identifier for variable program
         */
        public static final int VARIABLE_PROGRAM = 0x0069;
        /**
         * The unique identifier for variable top_level_code
         */
        public static final int VARIABLE_TOP_LEVEL_CODE = 0x006A;
        /**
         * The unique identifier for variable library_inclusion
         */
        public static final int VARIABLE_LIBRARY_INCLUSION = 0x006B;
        /**
         * The unique identifier for variable compiler_definition
         */
        public static final int VARIABLE_COMPILER_DEFINITION = 0x006C;
        /**
         * The unique identifier for variable type_definition
         */
        public static final int VARIABLE_TYPE_DEFINITION = 0x006D;
        /**
         * The unique identifier for variable member
         */
        public static final int VARIABLE_MEMBER = 0x006E;
        /**
         * The unique identifier for variable type
         */
        public static final int VARIABLE_TYPE = 0x006F;
        /**
         * The unique identifier for variable function_definition
         */
        public static final int VARIABLE_FUNCTION_DEFINITION = 0x0070;
        /**
         * The unique identifier for variable internal_function_header
         */
        public static final int VARIABLE_INTERNAL_FUNCTION_HEADER = 0x0071;
        /**
         * The unique identifier for variable external_function_header
         */
        public static final int VARIABLE_EXTERNAL_FUNCTION_HEADER = 0x0072;
        /**
         * The unique identifier for variable named_argument_list
         */
        public static final int VARIABLE_NAMED_ARGUMENT_LIST = 0x0073;
        /**
         * The unique identifier for variable named_argument
         */
        public static final int VARIABLE_NAMED_ARGUMENT = 0x0074;
        /**
         * The unique identifier for variable nameless_argument_list
         */
        public static final int VARIABLE_NAMELESS_ARGUMENT_LIST = 0x0075;
        /**
         * The unique identifier for variable nameless_argument
         */
        public static final int VARIABLE_NAMELESS_ARGUMENT = 0x0076;
        /**
         * The unique identifier for variable constant_expression
         */
        public static final int VARIABLE_CONSTANT_EXPRESSION = 0x0077;
        /**
         * The unique identifier for variable constant_comparison
         */
        public static final int VARIABLE_CONSTANT_COMPARISON = 0x0078;
        /**
         * The unique identifier for variable constant_shift
         */
        public static final int VARIABLE_CONSTANT_SHIFT = 0x0079;
        /**
         * The unique identifier for variable constant_sum
         */
        public static final int VARIABLE_CONSTANT_SUM = 0x007A;
        /**
         * The unique identifier for variable constant_factor
         */
        public static final int VARIABLE_CONSTANT_FACTOR = 0x007B;
        /**
         * The unique identifier for variable constant_unary
         */
        public static final int VARIABLE_CONSTANT_UNARY = 0x007C;
        /**
         * The unique identifier for variable constant_cast
         */
        public static final int VARIABLE_CONSTANT_CAST = 0x007D;
        /**
         * The unique identifier for variable constant_value
         */
        public static final int VARIABLE_CONSTANT_VALUE = 0x007E;
        /**
         * The unique identifier for variable variable_expression
         */
        public static final int VARIABLE_VARIABLE_EXPRESSION = 0x007F;
        /**
         * The unique identifier for variable variable_comparison
         */
        public static final int VARIABLE_VARIABLE_COMPARISON = 0x0080;
        /**
         * The unique identifier for variable variable_shift
         */
        public static final int VARIABLE_VARIABLE_SHIFT = 0x0081;
        /**
         * The unique identifier for variable variable_sum
         */
        public static final int VARIABLE_VARIABLE_SUM = 0x0082;
        /**
         * The unique identifier for variable variable_factor
         */
        public static final int VARIABLE_VARIABLE_FACTOR = 0x0083;
        /**
         * The unique identifier for variable variable_unary
         */
        public static final int VARIABLE_VARIABLE_UNARY = 0x0084;
        /**
         * The unique identifier for variable variable_cast
         */
        public static final int VARIABLE_VARIABLE_CAST = 0x0085;
        /**
         * The unique identifier for variable variable_value
         */
        public static final int VARIABLE_VARIABLE_VALUE = 0x0086;
        /**
         * The unique identifier for variable variable_nonconstant
         */
        public static final int VARIABLE_VARIABLE_NONCONSTANT = 0x0087;
        /**
         * The unique identifier for variable variable_structure
         */
        public static final int VARIABLE_VARIABLE_STRUCTURE = 0x0088;
        /**
         * The unique identifier for variable variable_assignment_list
         */
        public static final int VARIABLE_VARIABLE_ASSIGNMENT_LIST = 0x0089;
        /**
         * The unique identifier for variable variable_array
         */
        public static final int VARIABLE_VARIABLE_ARRAY = 0x008A;
        /**
         * The unique identifier for variable reference
         */
        public static final int VARIABLE_REFERENCE = 0x008B;
        /**
         * The unique identifier for variable subreference
         */
        public static final int VARIABLE_SUBREFERENCE = 0x008C;
        /**
         * The unique identifier for variable function_call
         */
        public static final int VARIABLE_FUNCTION_CALL = 0x008D;
        /**
         * The unique identifier for variable argument_list
         */
        public static final int VARIABLE_ARGUMENT_LIST = 0x008E;
        /**
         * The unique identifier for variable function_code
         */
        public static final int VARIABLE_FUNCTION_CODE = 0x008F;
        /**
         * The unique identifier for variable assignment
         */
        public static final int VARIABLE_ASSIGNMENT = 0x0090;
        /**
         * The unique identifier for variable return
         */
        public static final int VARIABLE_RETURN = 0x0091;
        /**
         * The unique identifier for variable if_construct
         */
        public static final int VARIABLE_IF_CONSTRUCT = 0x0092;
        /**
         * The unique identifier for variable if_tail
         */
        public static final int VARIABLE_IF_TAIL = 0x0093;
        /**
         * The unique identifier for variable while_construct
         */
        public static final int VARIABLE_WHILE_CONSTRUCT = 0x0094;
        /**
         * The unique identifier for variable until_construct
         */
        public static final int VARIABLE_UNTIL_CONSTRUCT = 0x0095;
        /**
         * The unique identifier for variable label
         */
        public static final int VARIABLE_LABEL = 0x0096;
        /**
         * The unique identifier for variable break
         */
        public static final int VARIABLE_BREAK = 0x0097;
        /**
         * The unique identifier for variable continue
         */
        public static final int VARIABLE_CONTINUE = 0x0098;
        /**
         * The unique identifier for variable value_creation
         */
        public static final int VARIABLE_VALUE_CREATION = 0x0099;
        /**
         * The unique identifier for variable constant_structure
         */
        public static final int VARIABLE_CONSTANT_STRUCTURE = 0x009A;
        /**
         * The unique identifier for variable constant_assignment_list
         */
        public static final int VARIABLE_CONSTANT_ASSIGNMENT_LIST = 0x009B;
    }
    /**
     * The collection of variables matched by this parser
     *
     * The variables are in an order consistent with the automaton,
     * so that variable indices in the automaton can be used to retrieve the variables in this table
     */
    private static final Symbol[] variables = {
        new Symbol(0x0069, "program"), 
        new Symbol(0x006A, "top_level_code"), 
        new Symbol(0x006B, "library_inclusion"), 
        new Symbol(0x006C, "compiler_definition"), 
        new Symbol(0x006D, "type_definition"), 
        new Symbol(0x006E, "member"), 
        new Symbol(0x006F, "type"), 
        new Symbol(0x0070, "function_definition"), 
        new Symbol(0x0071, "internal_function_header"), 
        new Symbol(0x0072, "external_function_header"), 
        new Symbol(0x0073, "named_argument_list"), 
        new Symbol(0x0074, "named_argument"), 
        new Symbol(0x0075, "nameless_argument_list"), 
        new Symbol(0x0076, "nameless_argument"), 
        new Symbol(0x0077, "constant_expression"), 
        new Symbol(0x0078, "constant_comparison"), 
        new Symbol(0x0079, "constant_shift"), 
        new Symbol(0x007A, "constant_sum"), 
        new Symbol(0x007B, "constant_factor"), 
        new Symbol(0x007C, "constant_unary"), 
        new Symbol(0x007D, "constant_cast"), 
        new Symbol(0x007E, "constant_value"), 
        new Symbol(0x007F, "variable_expression"), 
        new Symbol(0x0080, "variable_comparison"), 
        new Symbol(0x0081, "variable_shift"), 
        new Symbol(0x0082, "variable_sum"), 
        new Symbol(0x0083, "variable_factor"), 
        new Symbol(0x0084, "variable_unary"), 
        new Symbol(0x0085, "variable_cast"), 
        new Symbol(0x0086, "variable_value"), 
        new Symbol(0x0087, "variable_nonconstant"), 
        new Symbol(0x0088, "variable_structure"), 
        new Symbol(0x0089, "variable_assignment_list"), 
        new Symbol(0x008A, "variable_array"), 
        new Symbol(0x008B, "reference"), 
        new Symbol(0x008C, "subreference"), 
        new Symbol(0x008D, "function_call"), 
        new Symbol(0x008E, "argument_list"), 
        new Symbol(0x008F, "function_code"), 
        new Symbol(0x0090, "assignment"), 
        new Symbol(0x0091, "return"), 
        new Symbol(0x0092, "if_construct"), 
        new Symbol(0x0093, "if_tail"), 
        new Symbol(0x0094, "while_construct"), 
        new Symbol(0x0095, "until_construct"), 
        new Symbol(0x0096, "label"), 
        new Symbol(0x0097, "break"), 
        new Symbol(0x0098, "continue"), 
        new Symbol(0x0099, "value_creation"), 
        new Symbol(0x009A, "constant_structure"), 
        new Symbol(0x009B, "constant_assignment_list"), 
        new Symbol(0x009C, "__V156"), 
        new Symbol(0x009D, "__V157"), 
        new Symbol(0x009E, "__V158"), 
        new Symbol(0x009F, "__V159"), 
        new Symbol(0x00A0, "__V160"), 
        new Symbol(0x00A1, "__V161"), 
        new Symbol(0x00A2, "__V162"), 
        new Symbol(0x00A3, "__V163"), 
        new Symbol(0x00A4, "__V164"), 
        new Symbol(0x00A5, "__V165"), 
        new Symbol(0x00A6, "__V166"), 
        new Symbol(0x00A7, "__V167"), 
        new Symbol(0x00A8, "__V168"), 
        new Symbol(0x00A9, "__V169"), 
        new Symbol(0x00AA, "__V170"), 
        new Symbol(0x00AB, "__V171"), 
        new Symbol(0x00AC, "__V172"), 
        new Symbol(0x00AD, "__V173"), 
        new Symbol(0x00AE, "__V174"), 
        new Symbol(0x00AF, "__V175"), 
        new Symbol(0x00B0, "__V176"), 
        new Symbol(0x00B1, "__V177"), 
        new Symbol(0x00B2, "__V178"), 
        new Symbol(0x00B3, "__V179"), 
        new Symbol(0x00B4, "__V180"), 
        new Symbol(0x00B5, "__V181"), 
        new Symbol(0x00B6, "__VAxiom") };
    /**
     * The collection of virtuals matched by this parser
     *
     * The virtuals are in an order consistent with the automaton,
     * so that virtual indices in the automaton can be used to retrieve the virtuals in this table
     */
    private static final Symbol[] virtuals = {
 };
    /**
     * Initializes a new instance of the parser
     *
     * @param lexer The input lexer
     */
    public NstlgrammarParser(NstlgrammarLexer lexer) throws InitializationException {
        super(COMMON_AUTOMATON, variables, virtuals, null, lexer);
    }

    /*
     * Visitor interface
     */
    public static class Visitor {
        public void onTerminalSeparator(ASTNode node) {}
        public void onTerminalSemi(ASTNode node) {}
        public void onTerminalComma(ASTNode node) {}
        public void onTerminalOpenP(ASTNode node) {}
        public void onTerminalCloseP(ASTNode node) {}
        public void onTerminalDot(ASTNode node) {}
        public void onTerminalColon(ASTNode node) {}
        public void onTerminalAlphanumeric(ASTNode node) {}
        public void onTerminalLname(ASTNode node) {}
        public void onTerminalName(ASTNode node) {}
        public void onTerminalInteger(ASTNode node) {}
        public void onTerminalKwType(ASTNode node) {}
        public void onTerminalKwStructure(ASTNode node) {}
        public void onTerminalKwArray(ASTNode node) {}
        public void onTerminalKwIs(ASTNode node) {}
        public void onTerminalKwAs(ASTNode node) {}
        public void onTerminalKwOf(ASTNode node) {}
        public void onTerminalKwFunction(ASTNode node) {}
        public void onTerminalKwBegin(ASTNode node) {}
        public void onTerminalKwLibrary(ASTNode node) {}
        public void onTerminalKwLibname(ASTNode node) {}
        public void onTerminalKwSize(ASTNode node) {}
        public void onTerminalKwSizeof(ASTNode node) {}
        public void onTerminalKwDefine(ASTNode node) {}
        public void onTerminalKwIf(ASTNode node) {}
        public void onTerminalKwElse(ASTNode node) {}
        public void onTerminalKwElseif(ASTNode node) {}
        public void onTerminalKwPointer(ASTNode node) {}
        public void onTerminalKwWith(ASTNode node) {}
        public void onTerminalKwReturn(ASTNode node) {}
        public void onTerminalKwReturns(ASTNode node) {}
        public void onTerminalKwWhile(ASTNode node) {}
        public void onTerminalKwDo(ASTNode node) {}
        public void onTerminalKwThen(ASTNode node) {}
        public void onTerminalKwEnd(ASTNode node) {}
        public void onTerminalKwExternal(ASTNode node) {}
        public void onTerminalKwGets(ASTNode node) {}
        public void onTerminalKwIndex(ASTNode node) {}
        public void onTerminalKwConstant(ASTNode node) {}
        public void onTerminalKwVariable(ASTNode node) {}
        public void onTerminalKwCall(ASTNode node) {}
        public void onTerminalKwAt(ASTNode node) {}
        public void onTerminalKwTo(ASTNode node) {}
        public void onTerminalKwAnd(ASTNode node) {}
        public void onTerminalKwOr(ASTNode node) {}
        public void onTerminalKwXor(ASTNode node) {}
        public void onTerminalKwNot(ASTNode node) {}
        public void onTerminalKwRol(ASTNode node) {}
        public void onTerminalKwRor(ASTNode node) {}
        public void onTerminalKwNone(ASTNode node) {}
        public void onTerminalKwFrom(ASTNode node) {}
        public void onTerminalKwBreak(ASTNode node) {}
        public void onTerminalKwContinue(ASTNode node) {}
        public void onTerminalKwUntil(ASTNode node) {}
        public void onTerminalOpGreater(ASTNode node) {}
        public void onTerminalOpLess(ASTNode node) {}
        public void onTerminalOpGreaterEqual(ASTNode node) {}
        public void onTerminalOpLessEqual(ASTNode node) {}
        public void onTerminalOpEqual(ASTNode node) {}
        public void onTerminalOpNotEqual(ASTNode node) {}
        public void onTerminalOpAdd(ASTNode node) {}
        public void onTerminalOpSubtract(ASTNode node) {}
        public void onTerminalOpMultiply(ASTNode node) {}
        public void onTerminalOpDivide(ASTNode node) {}
        public void onTerminalOpRemainder(ASTNode node) {}
        public void onTerminalOpShiftLeft(ASTNode node) {}
        public void onTerminalOpArithShiftRight(ASTNode node) {}
        public void onTerminalOpLogicShiftRight(ASTNode node) {}
        public void onTerminalString(ASTNode node) {}
        public void onVariableProgram(ASTNode node) {}
        public void onVariableTopLevelCode(ASTNode node) {}
        public void onVariableLibraryInclusion(ASTNode node) {}
        public void onVariableCompilerDefinition(ASTNode node) {}
        public void onVariableTypeDefinition(ASTNode node) {}
        public void onVariableMember(ASTNode node) {}
        public void onVariableType(ASTNode node) {}
        public void onVariableFunctionDefinition(ASTNode node) {}
        public void onVariableInternalFunctionHeader(ASTNode node) {}
        public void onVariableExternalFunctionHeader(ASTNode node) {}
        public void onVariableNamedArgumentList(ASTNode node) {}
        public void onVariableNamedArgument(ASTNode node) {}
        public void onVariableNamelessArgumentList(ASTNode node) {}
        public void onVariableNamelessArgument(ASTNode node) {}
        public void onVariableConstantExpression(ASTNode node) {}
        public void onVariableConstantComparison(ASTNode node) {}
        public void onVariableConstantShift(ASTNode node) {}
        public void onVariableConstantSum(ASTNode node) {}
        public void onVariableConstantFactor(ASTNode node) {}
        public void onVariableConstantUnary(ASTNode node) {}
        public void onVariableConstantCast(ASTNode node) {}
        public void onVariableConstantValue(ASTNode node) {}
        public void onVariableVariableExpression(ASTNode node) {}
        public void onVariableVariableComparison(ASTNode node) {}
        public void onVariableVariableShift(ASTNode node) {}
        public void onVariableVariableSum(ASTNode node) {}
        public void onVariableVariableFactor(ASTNode node) {}
        public void onVariableVariableUnary(ASTNode node) {}
        public void onVariableVariableCast(ASTNode node) {}
        public void onVariableVariableValue(ASTNode node) {}
        public void onVariableVariableNonconstant(ASTNode node) {}
        public void onVariableVariableStructure(ASTNode node) {}
        public void onVariableVariableAssignmentList(ASTNode node) {}
        public void onVariableVariableArray(ASTNode node) {}
        public void onVariableReference(ASTNode node) {}
        public void onVariableSubreference(ASTNode node) {}
        public void onVariableFunctionCall(ASTNode node) {}
        public void onVariableArgumentList(ASTNode node) {}
        public void onVariableFunctionCode(ASTNode node) {}
        public void onVariableAssignment(ASTNode node) {}
        public void onVariableReturn(ASTNode node) {}
        public void onVariableIfConstruct(ASTNode node) {}
        public void onVariableIfTail(ASTNode node) {}
        public void onVariableWhileConstruct(ASTNode node) {}
        public void onVariableUntilConstruct(ASTNode node) {}
        public void onVariableLabel(ASTNode node) {}
        public void onVariableBreak(ASTNode node) {}
        public void onVariableContinue(ASTNode node) {}
        public void onVariableValueCreation(ASTNode node) {}
        public void onVariableConstantStructure(ASTNode node) {}
        public void onVariableConstantAssignmentList(ASTNode node) {}
    }

    /*
     * Walk the AST of a result using a visitor
     *
     * @param result  The parse result
     * @param visitor The visitor to use
     */
    public static void visit(ParseResult result, Visitor visitor) {
        visitASTNode(result.getRoot(), visitor);
    }

    /*
     * Walk the sub-AST from the specified node using a visitor
     *
     * @param node    The AST node to start from
     * @param visitor The visitor to use
     */
    public static void visitASTNode(ASTNode node, Visitor visitor) {
        for (ASTNode child : node.getChildren())
            visitASTNode(child, visitor);
        switch(node.getSymbol().getID()) {
            case 0x0006: visitor.onTerminalSeparator(node); break;
            case 0x0007: visitor.onTerminalSemi(node); break;
            case 0x0008: visitor.onTerminalComma(node); break;
            case 0x0009: visitor.onTerminalOpenP(node); break;
            case 0x000A: visitor.onTerminalCloseP(node); break;
            case 0x000B: visitor.onTerminalDot(node); break;
            case 0x000C: visitor.onTerminalColon(node); break;
            case 0x0028: visitor.onTerminalAlphanumeric(node); break;
            case 0x002C: visitor.onTerminalLname(node); break;
            case 0x002D: visitor.onTerminalName(node); break;
            case 0x002E: visitor.onTerminalInteger(node); break;
            case 0x002F: visitor.onTerminalKwType(node); break;
            case 0x0030: visitor.onTerminalKwStructure(node); break;
            case 0x0031: visitor.onTerminalKwArray(node); break;
            case 0x0032: visitor.onTerminalKwIs(node); break;
            case 0x0033: visitor.onTerminalKwAs(node); break;
            case 0x0034: visitor.onTerminalKwOf(node); break;
            case 0x0035: visitor.onTerminalKwFunction(node); break;
            case 0x0036: visitor.onTerminalKwBegin(node); break;
            case 0x0037: visitor.onTerminalKwLibrary(node); break;
            case 0x0038: visitor.onTerminalKwLibname(node); break;
            case 0x0039: visitor.onTerminalKwSize(node); break;
            case 0x003A: visitor.onTerminalKwSizeof(node); break;
            case 0x003B: visitor.onTerminalKwDefine(node); break;
            case 0x003C: visitor.onTerminalKwIf(node); break;
            case 0x003D: visitor.onTerminalKwElse(node); break;
            case 0x003E: visitor.onTerminalKwElseif(node); break;
            case 0x003F: visitor.onTerminalKwPointer(node); break;
            case 0x0040: visitor.onTerminalKwWith(node); break;
            case 0x0041: visitor.onTerminalKwReturn(node); break;
            case 0x0042: visitor.onTerminalKwReturns(node); break;
            case 0x0043: visitor.onTerminalKwWhile(node); break;
            case 0x0044: visitor.onTerminalKwDo(node); break;
            case 0x0045: visitor.onTerminalKwThen(node); break;
            case 0x0046: visitor.onTerminalKwEnd(node); break;
            case 0x0047: visitor.onTerminalKwExternal(node); break;
            case 0x0048: visitor.onTerminalKwGets(node); break;
            case 0x0049: visitor.onTerminalKwIndex(node); break;
            case 0x004A: visitor.onTerminalKwConstant(node); break;
            case 0x004B: visitor.onTerminalKwVariable(node); break;
            case 0x004C: visitor.onTerminalKwCall(node); break;
            case 0x004D: visitor.onTerminalKwAt(node); break;
            case 0x004E: visitor.onTerminalKwTo(node); break;
            case 0x004F: visitor.onTerminalKwAnd(node); break;
            case 0x0050: visitor.onTerminalKwOr(node); break;
            case 0x0051: visitor.onTerminalKwXor(node); break;
            case 0x0052: visitor.onTerminalKwNot(node); break;
            case 0x0053: visitor.onTerminalKwRol(node); break;
            case 0x0054: visitor.onTerminalKwRor(node); break;
            case 0x0055: visitor.onTerminalKwNone(node); break;
            case 0x0056: visitor.onTerminalKwFrom(node); break;
            case 0x0057: visitor.onTerminalKwBreak(node); break;
            case 0x0058: visitor.onTerminalKwContinue(node); break;
            case 0x0059: visitor.onTerminalKwUntil(node); break;
            case 0x005A: visitor.onTerminalOpGreater(node); break;
            case 0x005B: visitor.onTerminalOpLess(node); break;
            case 0x005C: visitor.onTerminalOpGreaterEqual(node); break;
            case 0x005D: visitor.onTerminalOpLessEqual(node); break;
            case 0x005E: visitor.onTerminalOpEqual(node); break;
            case 0x005F: visitor.onTerminalOpNotEqual(node); break;
            case 0x0060: visitor.onTerminalOpAdd(node); break;
            case 0x0061: visitor.onTerminalOpSubtract(node); break;
            case 0x0062: visitor.onTerminalOpMultiply(node); break;
            case 0x0063: visitor.onTerminalOpDivide(node); break;
            case 0x0064: visitor.onTerminalOpRemainder(node); break;
            case 0x0065: visitor.onTerminalOpShiftLeft(node); break;
            case 0x0066: visitor.onTerminalOpArithShiftRight(node); break;
            case 0x0067: visitor.onTerminalOpLogicShiftRight(node); break;
            case 0x0068: visitor.onTerminalString(node); break;
            case 0x0069: visitor.onVariableProgram(node); break;
            case 0x006A: visitor.onVariableTopLevelCode(node); break;
            case 0x006B: visitor.onVariableLibraryInclusion(node); break;
            case 0x006C: visitor.onVariableCompilerDefinition(node); break;
            case 0x006D: visitor.onVariableTypeDefinition(node); break;
            case 0x006E: visitor.onVariableMember(node); break;
            case 0x006F: visitor.onVariableType(node); break;
            case 0x0070: visitor.onVariableFunctionDefinition(node); break;
            case 0x0071: visitor.onVariableInternalFunctionHeader(node); break;
            case 0x0072: visitor.onVariableExternalFunctionHeader(node); break;
            case 0x0073: visitor.onVariableNamedArgumentList(node); break;
            case 0x0074: visitor.onVariableNamedArgument(node); break;
            case 0x0075: visitor.onVariableNamelessArgumentList(node); break;
            case 0x0076: visitor.onVariableNamelessArgument(node); break;
            case 0x0077: visitor.onVariableConstantExpression(node); break;
            case 0x0078: visitor.onVariableConstantComparison(node); break;
            case 0x0079: visitor.onVariableConstantShift(node); break;
            case 0x007A: visitor.onVariableConstantSum(node); break;
            case 0x007B: visitor.onVariableConstantFactor(node); break;
            case 0x007C: visitor.onVariableConstantUnary(node); break;
            case 0x007D: visitor.onVariableConstantCast(node); break;
            case 0x007E: visitor.onVariableConstantValue(node); break;
            case 0x007F: visitor.onVariableVariableExpression(node); break;
            case 0x0080: visitor.onVariableVariableComparison(node); break;
            case 0x0081: visitor.onVariableVariableShift(node); break;
            case 0x0082: visitor.onVariableVariableSum(node); break;
            case 0x0083: visitor.onVariableVariableFactor(node); break;
            case 0x0084: visitor.onVariableVariableUnary(node); break;
            case 0x0085: visitor.onVariableVariableCast(node); break;
            case 0x0086: visitor.onVariableVariableValue(node); break;
            case 0x0087: visitor.onVariableVariableNonconstant(node); break;
            case 0x0088: visitor.onVariableVariableStructure(node); break;
            case 0x0089: visitor.onVariableVariableAssignmentList(node); break;
            case 0x008A: visitor.onVariableVariableArray(node); break;
            case 0x008B: visitor.onVariableReference(node); break;
            case 0x008C: visitor.onVariableSubreference(node); break;
            case 0x008D: visitor.onVariableFunctionCall(node); break;
            case 0x008E: visitor.onVariableArgumentList(node); break;
            case 0x008F: visitor.onVariableFunctionCode(node); break;
            case 0x0090: visitor.onVariableAssignment(node); break;
            case 0x0091: visitor.onVariableReturn(node); break;
            case 0x0092: visitor.onVariableIfConstruct(node); break;
            case 0x0093: visitor.onVariableIfTail(node); break;
            case 0x0094: visitor.onVariableWhileConstruct(node); break;
            case 0x0095: visitor.onVariableUntilConstruct(node); break;
            case 0x0096: visitor.onVariableLabel(node); break;
            case 0x0097: visitor.onVariableBreak(node); break;
            case 0x0098: visitor.onVariableContinue(node); break;
            case 0x0099: visitor.onVariableValueCreation(node); break;
            case 0x009A: visitor.onVariableConstantStructure(node); break;
            case 0x009B: visitor.onVariableConstantAssignmentList(node); break;
        }
    }
}
