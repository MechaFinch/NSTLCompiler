Module minesweeper {
  I8[] @board_state
  I16 @cursor_x: 20
  I8 @is_first_move: 1
  I32 @RANDOM: -268173312
  I32[] @number_sprites: 0, 0, 0, 0, 0, 0, 0, 0, 0
  I8 @is_gameover: 0
  I16 @cursor_y: 15

  external func I32 @_dma.calloc(I32 %n)
  external func I32 @_dma.rcalloc(I32 %block, I32 %n)
  external func NONE @_shapes.pixel(I16 %x, I16 %y, I8 %fgc)
  external func NONE @_sprites.draw(I32 %sp, I16 %x, I16 %y)
  external func NONE @_sprites.draw_part(I32 %sp, I16 %x, I16 %y, I16 %sx, I16 %sy, I16 %w, I16 %h)
  external func NONE @_gutil.scroll_up(I8 %n, I8 %bgc)
  external func I8 @_ivt.last_key_pressed()
  external func NONE @_gutil.clear_screen(I8 %bgc)
  external func I16 @_util.mulh8(I8 %a, I8 %b)
  external func I16 @_util.enable_interrupts()
  external func NONE @_util.set_pf(I16 %arg0)
  external func NONE @_ivt.enable_interrupts()
  external func NONE @_text.u_char(I8 %chr, I8 %fgc, I8 %bgc, I16 %row, I16 %col)
  external func I8 @_util.mod8(I8 %a, I8 %b)
  external func I8 @_util.mods8(I8 %a, I8 %b)
  external func I16 @_util.mod16(I16 %a, I16 %b)
  external func NONE @_text.aw_string(I32 %str, I16 %len, I8 %fgc, I8 %bgc, I8 %row, I8 %col)
  external func NONE @_ivt.disable_interrupts()
  external func NONE @_dma.init(I32 %heap_start, I32 %max_size)
  external func NONE @_util.memcopy(I32 %source, I32 %dest, I32 %length)
  external func I32 @_util.mulsh16(I16 %a, I16 %b)
  external func I16 @_util.get_pf()
  external func I8 @_util.abs8(I8 %a)
  external func I32 @_util.abs32(I16 %a)
  external func I32 @_util.atomic_call(I32 %desc, I32 %args)
  external func I16 @_util.mulsh8(I8 %a, I8 %b)
  external func NONE @_sprites.draw_transparent(I32 %sp, I16 %x, I16 %y)
  external func NONE @_shapes.freeline(I16 %x1, I16 %y1, I16 %x2, I16 %y2, I8 %fgc)
  external func NONE @_gutil.set_palette(I32 %palette)
  external func I32 @_dma.malloc(I32 %n)
  external func I8 @_ivt.new_key_pressed()
  external func I32 @_ivt.time_ms()
  external func NONE @_ivt.ack_key_released()
  external func NONE @_ivt.ack_key_pressed()
  external func NONE @_text.a_number(I32 %n, I8 %base, I8 %signed, I8 %pad_length, I8 %digit_pad, I8 %sign_pad, I8 %fgc, I8 %bgc, I8 %row, I8 %col)
  external func I16 @_util.mods16(I16 %a, I16 %b)
  external func NONE @_gutil.set_color_bytes(I8 %idx, I8 %r, I8 %g, I8 %b)
  external func I32 @_util.mulh16(I16 %a, I16 %b)
  external func NONE @_dma.free(I32 %block)
  external func I8 @_ivt.last_key_released()
  external func NONE @_sprites.draw_part_transparent(I32 %sp, I16 %x, I16 %y, I16 %sx, I16 %sy, I16 %w, I16 %h)
  external func NONE @_util.halt()
  external func NONE @_shapes.hline(I16 %x1, I16 %y1, I16 %x2, I8 %fgc)
  external func I16 @_sprites.get_width(I32 %sp)
  external func NONE @_shapes.fill_rect(I16 %x1, I16 %y1, I16 %w, I16 %h, I8 %fgc)
  external func I8 @_ivt.new_key_released()
  external func NONE @_gutil.set_color(I8 %idx, I32 %rgb)
  external func I16 @_util.abs16(I16 %a)
  external func NONE @_ivt.set_keydown_function(I32 %func)
  external func NONE @_util.buffer_screen()
  external func NONE @_text.aws_string(I32 %str, I16 %len, I8 %fgc, I8 %bgc, I8 %row, I8 %col)
  external func NONE @_ivt.set_keyup_function(I32 %func)
  external func NONE @_text.a_char(I8 %chr, I8 %fgc, I8 %bgc, I8 %row, I8 %col)
  external func NONE @_text.a_string(I32 %str, I16 %len, I8 %fgc, I8 %bgc, I8 %row, I8 %col)
  external func NONE @_text.u_string(I32 %str, I16 %len, I8 %fgc, I8 %bgc, I16 %row, I16 %col)
  external func NONE @_shapes.vline(I16 %x1, I16 %y1, I16 %y2, I8 %fgc)
  external func NONE @_shapes.outline_rect(I16 %x1, I16 %y1, I16 %w, I16 %h, I8 %fgc)
  external func NONE @_util.unbuffer_screen()
  external func NONE @_gutil.scroll_down(I8 %n, I8 %bgc)
  external func I32 @_dma.realloc(I32 %block, I32 %n)
  external func I16 @_util.disable_interrupts()
  external func I16 @_sprites.get_height(I32 %sp)

  func NONE @init_screen() {
    $entry():
      JMP $forcond%2(%y%2 = I16 0)

    $forcond%2(I16 %y%2):
      JCC %y%2 L I16 240, $forinit%7(), $fordone%5()

    $forinit%7():
      JMP $forcond%8(%x%6 = I16 0)

    $forcond%8(I16 %x%6):
      JCC %x%6 L I16 320, $fortrue%9(), $forupd%4()

    $fortrue%9():
      CALLN @_sprites.draw(%sp = @_spritedata.covered_square, %x = %x%6, %y = %y%12)
      JMP $forupd%10()

    $forupd%10():
      I16 %x%13 = ADD %x%6, I16 8
      JMP $forcond%8(%x%6 = %x%13)

    $forupd%4():
      I16 %y%16 = ADD %y%2, I16 8
      JMP $forcond%2(%y%2 = %y%16)

    $fordone%5():
      RET NONE 0
  }

  func NONE @render_tile(I16 %x, I16 %y) {
    $entry():
      I8 %s%0 = CALLR @get_board(%x = %x, %y = %y)
      I16 %px%4 = MULS %x, I16 8
      I16 %py%7 = MULS %y, I16 8
      I8 %10 = LOAD @is_first_move
      JCC %10 NE NONE 0, $iftrue%0(), $elseif%1()

    $iftrue%0():
      CALLN @_sprites.draw(%sp = @_spritedata.covered_square, %x = %px%4, %y = %py%7)
      JMP $endif%4()

    $endif%4():
      RET NONE 0

    $elseif%1():
      I8 %15 = AND %s%0, NONE 32
      JCC %15 NE NONE 0, $elseiftrue%2(), $else%3()

    $elseiftrue%2():
      I8 %18 = AND %s%0, I8 128
      JCC %18 NE NONE 0, $iftrue%8(), $else%9()

    $iftrue%8():
      CALLN @_sprites.draw(%sp = @_spritedata.bomb_mistake, %x = %px%4, %y = %py%7)
      JMP $endif%4()

    $else%9():
      I8 %29 = AND %s%0, NONE 7
      I32 %32 = ZX %29
      I32 %33 = MULU %32, I32 4
      I32 %27 = ADD @number_sprites, %33
      I32 %26 = LOAD %27
      CALLN @_sprites.draw(%sp = %26, %x = %px%4, %y = %py%7)
      JMP $endif%4()

    $else%3():
      I8 %36 = AND %s%0, NONE 64
      JCC %36 NE NONE 0, $iftrue%5(), $else%6()

    $iftrue%5():
      CALLN @_sprites.draw(%sp = @_spritedata.flag, %x = %px%4, %y = %py%7)
      JMP $endif%4()

    $else%6():
      CALLN @_sprites.draw(%sp = @_spritedata.covered_square, %x = %px%4, %y = %py%7)
      JMP $endif%4()
  }

  func NONE @make_move(I16 %x, I16 %y, I8 %flag) {
    $entry():
      I8 %0 = LOAD @is_first_move
      JCC %0 NE NONE 0, $iftrue%0(), $endif%1()

    $iftrue%0():
      STORE I8 0 -> @is_first_move
      CALLN @init_board(%num_bombs = I16 256, %sx = %x, %sy = %y)
      JMP $endif%1()

    $endif%1():
      I8 %s%6 = CALLR @get_board(%x = %x%9, %y = %y%11)
      I8 %12 = AND %s%6, NONE 64
      JCC %12 NE NONE 0, $iftrue%2(), $elseif%3()

    $iftrue%2():
      JCC %flag E I8 0, $iftrue%47(), $else%48()

    $iftrue%47():
      RET NONE 0

    $else%48():
      I8 %21 = AND %s%6, I8 -65
      CALLN @set_board(%x = %x%9, %y = %y%11, %d = %21)
      CALLN @render_tile(%x = %x%9, %y = %y%11)
      JMP $endif%6()

    $endif%6():
      I16 %29 = MULS %x, I16 8
      I16 %33 = MULS %y, I16 8
      CALLN @_sprites.draw_transparent(%sp = @_spritedata.cursor, %x = %29, %y = %33)
      RET NONE 0

    $elseif%3():
      I8 %37 = AND %s%6, I8 32
      JCC %37 NE NONE 0, $elseiftrue%4(), $else%5()

    $elseiftrue%4():
      JCC %flag E I8 0, $iftrue%10(), $else%11()

    $iftrue%10():
      I8 %ct%42 = AND %s%6, I8 7
      I16 %47 = SELECT %y G NONE 0, NONE 1, NONE 0
      I16 %50 = SELECT %x G NONE 0, NONE 1, NONE 0
      I16 %46 = AND %47, %50
      JCC %46 NE NONE 0, $iftrue%13(), $endif%14(%ca%80 = I8 0)

    $iftrue%13():
      I16 %56 = SUB %x, I16 1
      I16 %59 = SUB %y, I16 1
      I8 %54 = CALLR @get_board(%x = %56, %y = %59)
      I8 %53 = AND %54, I8 64
      JCC %53 NE NONE 0, $iftrue%15(), $endif%16(%ca%244 = I8 0)

    $iftrue%15():
      I8 %ca%63 = ADD I8 0, I8 1
      JMP $endif%16(%ca%244 = %ca%63)

    $endif%16(I8 %ca%244):
      JMP $endif%14(%ca%80 = %ca%244)

    $endif%14(I8 %ca%80):
      JCC %y G I16 0, $iftrue%17(), $endif%18(%ca%103 = %ca%80)

    $iftrue%17():
      I16 %74 = SUB %y, I16 1
      I8 %70 = CALLR @get_board(%x = %x%73, %y = %74)
      I8 %69 = AND %70, I8 64
      JCC %69 NE NONE 0, $iftrue%19(), $endif%20(%ca%239 = %ca%80)

    $iftrue%19():
      I8 %ca%78 = ADD %ca%80, I8 1
      JMP $endif%20(%ca%239 = %ca%78)

    $endif%20(I8 %ca%239):
      JMP $endif%18(%ca%103 = %ca%239)

    $endif%18(I8 %ca%103):
      I16 %83 = SELECT %y G NONE 0, NONE 1, NONE 0
      I16 %87 = SELECT %x L I16 39, NONE 1, NONE 0
      I16 %82 = AND %83, %87
      JCC %82 NE NONE 0, $iftrue%21(), $endif%22(%ca%119 = %ca%103)

    $iftrue%21():
      I16 %94 = ADD %x, I16 1
      I16 %97 = SUB %y, I16 1
      I8 %92 = CALLR @get_board(%x = %94, %y = %97)
      I8 %91 = AND %92, I8 64
      JCC %91 NE NONE 0, $iftrue%23(), $endif%24(%ca%234 = %ca%103)

    $iftrue%23():
      I8 %ca%101 = ADD %ca%103, I8 1
      JMP $endif%24(%ca%234 = %ca%101)

    $endif%24(I8 %ca%234):
      JMP $endif%22(%ca%119 = %ca%234)

    $endif%22(I8 %ca%119):
      JCC %x G I16 0, $iftrue%25(), $endif%26(%ca%135 = %ca%119)

    $iftrue%25():
      I16 %111 = SUB %x, I16 1
      I8 %109 = CALLR @get_board(%x = %111, %y = %y%115)
      I8 %108 = AND %109, I8 64
      JCC %108 NE NONE 0, $iftrue%27(), $endif%28(%ca%232 = %ca%119)

    $iftrue%27():
      I8 %ca%117 = ADD %ca%119, I8 1
      JMP $endif%28(%ca%232 = %ca%117)

    $endif%28(I8 %ca%232):
      JMP $endif%26(%ca%135 = %ca%232)

    $endif%26(I8 %ca%135):
      JCC %x L I16 39, $iftrue%29(), $endif%30(%ca%158 = %ca%135)

    $iftrue%29():
      I16 %127 = ADD %x, I16 1
      I8 %125 = CALLR @get_board(%x = %127, %y = %y%131)
      I8 %124 = AND %125, I8 64
      JCC %124 NE NONE 0, $iftrue%31(), $endif%32(%ca%227 = %ca%135)

    $iftrue%31():
      I8 %ca%133 = ADD %ca%135, I8 1
      JMP $endif%32(%ca%227 = %ca%133)

    $endif%32(I8 %ca%227):
      JMP $endif%30(%ca%158 = %ca%227)

    $endif%30(I8 %ca%158):
      I16 %138 = SELECT %y L I16 29, NONE 1, NONE 0
      I16 %142 = SELECT %x G NONE 0, NONE 1, NONE 0
      I16 %137 = AND %138, %142
      JCC %137 NE NONE 0, $iftrue%33(), $endif%34(%ca%174 = %ca%158)

    $iftrue%33():
      I16 %149 = SUB %x, I16 1
      I16 %152 = ADD %y, I16 1
      I8 %147 = CALLR @get_board(%x = %149, %y = %152)
      I8 %146 = AND %147, I8 64
      JCC %146 NE NONE 0, $iftrue%35(), $endif%36(%ca%218 = %ca%158)

    $iftrue%35():
      I8 %ca%156 = ADD %ca%158, I8 1
      JMP $endif%36(%ca%218 = %ca%156)

    $endif%36(I8 %ca%218):
      JMP $endif%34(%ca%174 = %ca%218)

    $endif%34(I8 %ca%174):
      JCC %y L I16 29, $iftrue%37(), $endif%38(%ca%197 = %ca%174)

    $iftrue%37():
      I16 %168 = ADD %y, I16 1
      I8 %164 = CALLR @get_board(%x = %x%167, %y = %168)
      I8 %163 = AND %164, I8 64
      JCC %163 NE NONE 0, $iftrue%39(), $endif%40(%ca%213 = %ca%174)

    $iftrue%39():
      I8 %ca%172 = ADD %ca%174, I8 1
      JMP $endif%40(%ca%213 = %ca%172)

    $endif%40(I8 %ca%213):
      JMP $endif%38(%ca%197 = %ca%213)

    $endif%38(I8 %ca%197):
      I16 %177 = SELECT %y L I16 29, NONE 1, NONE 0
      I16 %181 = SELECT %x L I16 39, NONE 1, NONE 0
      I16 %176 = AND %177, %181
      JCC %176 NE NONE 0, $iftrue%41(), $endif%42(%ca%200 = %ca%197)

    $iftrue%41():
      I16 %188 = ADD %x, I16 1
      I16 %191 = ADD %y, I16 1
      I8 %186 = CALLR @get_board(%x = %188, %y = %191)
      I8 %185 = AND %186, I8 64
      JCC %185 NE NONE 0, $iftrue%43(), $endif%44(%ca%210 = %ca%197)

    $iftrue%43():
      I8 %ca%195 = ADD %ca%197, I8 1
      JMP $endif%44(%ca%210 = %ca%195)

    $endif%44(I8 %ca%210):
      JMP $endif%42(%ca%200 = %ca%210)

    $endif%42(I8 %ca%200):
      JCC %ca%200 E %ct%42, $iftrue%45(), $endif%12()

    $iftrue%45():
      CALLN @reveal_around(%x = %x%205, %y = %y%207)
      JMP $endif%12()

    $endif%12():
      JMP $endif%6()

    $else%11():
      RET NONE 0

    $else%5():
      JCC %flag E I8 0, $iftrue%7(), $else%8()

    $iftrue%7():
      CALLN @reveal_tile(%x = %x%9, %y = %y%11)
      JMP $endif%6()

    $else%8():
      I8 %259 = OR %s%6, I8 64
      CALLN @set_board(%x = %x%9, %y = %y%11, %d = %259)
      CALLN @render_tile(%x = %x%9, %y = %y%11)
      JMP $endif%6()
  }

  func NONE @reveal_around(I16 %x, I16 %y) {
    $entry():
      JMP $forinit%1()

    $forinit%1():
      I16 %ex%0 = SUB %x, I16 1
      JMP $forcond%2(%ex%4 = %ex%0)

    $forcond%2(I16 %ex%4):
      I16 %5 = ADD %x, I16 2
      JCC %ex%4 L %5, $fortrue%3(), $fordone%5()

    $fortrue%3():
      I16 %10 = SELECT %ex%4 L NONE 0, NONE 1, NONE 0
      I16 %13 = SELECT %ex%4 GE I16 40, NONE 1, NONE 0
      I16 %9 = OR %10, %13
      JCC %9 NE NONE 0, $forupd%4(), $forinit%9()

    $forupd%4():
      I16 %ex%16 = ADD %ex%4, I16 1
      JMP $forcond%2(%ex%4 = %ex%16)

    $forinit%9():
      I16 %ey%21 = SUB %y, I16 1
      JMP $forcond%10(%ey%27 = %ey%21)

    $forcond%10(I16 %ey%27):
      I16 %28 = ADD %y, I16 2
      JCC %ey%27 L %28, $fortrue%11(), $forupd%4()

    $fortrue%11():
      I16 %33 = SELECT %ey%27 L NONE 0, NONE 1, NONE 0
      I16 %36 = SELECT %ey%27 GE I16 30, NONE 1, NONE 0
      I16 %32 = OR %33, %36
      JCC %32 NE NONE 0, $forupd%12(), $endif%15()

    $forupd%12():
      I16 %ey%39 = ADD %ey%27, I16 1
      JMP $forcond%10(%ey%27 = %ey%39)

    $endif%15():
      CALLN @reveal_tile(%x = %ex%46, %y = %ey%27)
      JMP $forupd%12()

    $fordone%5():
      RET NONE 0
  }

  func NONE @init_board(I16 %sx, I16 %sy, I16 %num_bombs) {
    $entry():
      JMP $forcond%2(%i%2 = I16 0)

    $forcond%2(I16 %i%2):
      JCC %i%2 B I16 1200, $fortrue%3(), $forinit%7()

    $fortrue%3():
      I32 %7 = ZX %i%2
      I32 %4 = ADD @board_state, %7
      STORE I8 0 -> %4
      JMP $forupd%4()

    $forupd%4():
      I16 %i%9 = ADD %i%2, I16 1
      JMP $forcond%2(%i%2 = %i%9)

    $forinit%7():
      I16 %x%12 = SUB %sx, I16 1
      JMP $forcond%8(%x%17 = %x%12)

    $forcond%8(I16 %x%17):
      I16 %18 = ADD %sx, I16 2
      JCC %x%17 L %18, $fortrue%9(), $fordone%11()

    $fortrue%9():
      I16 %23 = SELECT %x%17 L NONE 0, NONE 1, NONE 0
      I16 %26 = SELECT %x%17 GE NONE 40, NONE 1, NONE 0
      I16 %22 = OR %23, %26
      JCC %22 NE NONE 0, $forupd%10(), $forinit%15()

    $forupd%10():
      I16 %x%29 = ADD %x%17, I16 1
      JMP $forcond%8(%x%17 = %x%29)

    $forinit%15():
      I16 %y%34 = SUB %sy, I16 1
      JMP $forcond%16(%y%41 = %y%34)

    $forcond%16(I16 %y%41):
      I16 %42 = ADD %sy, I16 2
      JCC %y%41 L %42, $fortrue%17(), $forupd%10()

    $fortrue%17():
      I16 %47 = SELECT %y%41 L NONE 0, NONE 1, NONE 0
      I16 %50 = SELECT %y%41 GE NONE 30, NONE 1, NONE 0
      I16 %46 = OR %47, %50
      JCC %46 NE NONE 0, $forupd%18(), $endif%21()

    $forupd%18():
      I16 %y%53 = ADD %y%41, I16 1
      JMP $forcond%16(%y%41 = %y%53)

    $endif%21():
      CALLN @set_board(%x = %x%60, %y = %y%41, %d = I8 16)
      JMP $forupd%18()

    $fordone%11():
      JMP $forcond%24(%i%68 = I16 0)

    $forcond%24(I16 %i%68):
      JCC %i%68 B %num_bombs, $whilecond%29(), $fordone%27()

    $whilecond%29():
      JMP $whiletrue%30()

    $whiletrue%30():
      I32 %75 = LOAD @RANDOM
      I16 %74 = LOAD %75
      I16 %j%72 = CALLR @_util.mod16(%a = %74, %b = I16 1200)
      I32 %81 = ZX %j%72
      I32 %78 = ADD @board_state, %81
      I8 %77 = LOAD %78
      JCC %77 E I8 0, $iftrue%32(), $whilecond%29()

    $iftrue%32():
      I32 %86 = ZX %j%72
      I32 %83 = ADD @board_state, %86
      STORE I8 128 -> %83
      JMP $forupd%26()

    $forupd%26():
      I16 %i%88 = ADD %i%68, I16 1
      JMP $forcond%24(%i%68 = %i%88)

    $fordone%27():
      JMP $forcond%36(%x%100 = I16 0)

    $forcond%36(I16 %x%100):
      JCC %x%100 L I16 40, $forinit%41(), $fordone%39()

    $forinit%41():
      JMP $forcond%42(%y%104 = I16 0)

    $forcond%42(I16 %y%104):
      JCC %y%104 L I16 30, $fortrue%43(), $forupd%38()

    $fortrue%43():
      I8 %107 = CALLR @get_board(%x = %x%110, %y = %y%104)
      I8 %106 = AND %107, I8 128
      JCC %106 NE NONE 0, $iftrue%46(), $endif%47()

    $iftrue%46():
      I16 %114 = SELECT %y%104 G NONE 0, NONE 1, NONE 0
      I16 %117 = SELECT %x%100 G NONE 0, NONE 1, NONE 0
      I16 %113 = AND %114, %117
      JCC %113 NE NONE 0, $iftrue%48(), $endif%49()

    $iftrue%48():
      I16 %121 = SUB %x%100, I16 1
      I16 %124 = SUB %y%104, I16 1
      I16 %130 = SUB %x%100, I16 1
      I16 %133 = SUB %y%104, I16 1
      I8 %128 = CALLR @get_board(%x = %130, %y = %133)
      I8 %127 = ADD %128, I8 1
      CALLN @set_board(%x = %121, %y = %124, %d = %127)
      JMP $endif%49()

    $endif%49():
      JCC %y%104 G I16 0, $iftrue%50(), $endif%51()

    $iftrue%50():
      I16 %143 = SUB %y%104, I16 1
      I16 %150 = SUB %y%104, I16 1
      I8 %147 = CALLR @get_board(%x = %x%142, %y = %150)
      I8 %146 = ADD %147, I8 1
      CALLN @set_board(%x = %x%142, %y = %143, %d = %146)
      JMP $endif%51()

    $endif%51():
      I16 %155 = SELECT %y%104 G NONE 0, NONE 1, NONE 0
      I16 %159 = SELECT %x%100 L I16 39, NONE 1, NONE 0
      I16 %154 = AND %155, %159
      JCC %154 NE NONE 0, $iftrue%52(), $endif%53()

    $iftrue%52():
      I16 %164 = ADD %x%100, I16 1
      I16 %167 = SUB %y%104, I16 1
      I16 %173 = ADD %x%100, I16 1
      I16 %176 = SUB %y%104, I16 1
      I8 %171 = CALLR @get_board(%x = %173, %y = %176)
      I8 %170 = ADD %171, I8 1
      CALLN @set_board(%x = %164, %y = %167, %d = %170)
      JMP $endif%53()

    $endif%53():
      JCC %x%100 G I16 0, $iftrue%54(), $endif%55()

    $iftrue%54():
      I16 %184 = SUB %x%100, I16 1
      I16 %192 = SUB %x%100, I16 1
      I8 %190 = CALLR @get_board(%x = %192, %y = %y%188)
      I8 %189 = ADD %190, I8 1
      CALLN @set_board(%x = %184, %y = %y%188, %d = %189)
      JMP $endif%55()

    $endif%55():
      JCC %x%100 L I16 39, $iftrue%56(), $endif%57()

    $iftrue%56():
      I16 %201 = ADD %x%100, I16 1
      I16 %209 = ADD %x%100, I16 1
      I8 %207 = CALLR @get_board(%x = %209, %y = %y%205)
      I8 %206 = ADD %207, I8 1
      CALLN @set_board(%x = %201, %y = %y%205, %d = %206)
      JMP $endif%57()

    $endif%57():
      I16 %215 = SELECT %y%104 L I16 29, NONE 1, NONE 0
      I16 %219 = SELECT %x%100 G NONE 0, NONE 1, NONE 0
      I16 %214 = AND %215, %219
      JCC %214 NE NONE 0, $iftrue%58(), $endif%59()

    $iftrue%58():
      I16 %224 = SUB %x%100, I16 1
      I16 %227 = ADD %y%104, I16 1
      I16 %233 = SUB %x%100, I16 1
      I16 %236 = ADD %y%104, I16 1
      I8 %231 = CALLR @get_board(%x = %233, %y = %236)
      I8 %230 = ADD %231, I8 1
      CALLN @set_board(%x = %224, %y = %227, %d = %230)
      JMP $endif%59()

    $endif%59():
      JCC %y%104 L I16 29, $iftrue%60(), $endif%61()

    $iftrue%60():
      I16 %246 = ADD %y%104, I16 1
      I16 %253 = ADD %y%104, I16 1
      I8 %250 = CALLR @get_board(%x = %x%245, %y = %253)
      I8 %249 = ADD %250, I8 1
      CALLN @set_board(%x = %x%245, %y = %246, %d = %249)
      JMP $endif%61()

    $endif%61():
      I16 %258 = SELECT %y%104 L I16 29, NONE 1, NONE 0
      I16 %262 = SELECT %x%100 L I16 39, NONE 1, NONE 0
      I16 %257 = AND %258, %262
      JCC %257 NE NONE 0, $iftrue%62(), $endif%47()

    $iftrue%62():
      I16 %267 = ADD %x%100, I16 1
      I16 %270 = ADD %y%104, I16 1
      I16 %276 = ADD %x%100, I16 1
      I16 %279 = ADD %y%104, I16 1
      I8 %274 = CALLR @get_board(%x = %276, %y = %279)
      I8 %273 = ADD %274, I8 1
      CALLN @set_board(%x = %267, %y = %270, %d = %273)
      JMP $endif%47()

    $endif%47():
      JMP $forupd%44()

    $forupd%44():
      I16 %y%283 = ADD %y%104, I16 1
      JMP $forcond%42(%y%104 = %y%283)

    $forupd%38():
      I16 %x%290 = ADD %x%100, I16 1
      JMP $forcond%36(%x%100 = %x%290)

    $fordone%39():
      RET NONE 0
  }

  func NONE @show_solution(I8 %partial) {
    $entry():
      I8 %0 = LOAD @is_gameover
      JCC %0 NE NONE 0, $iftrue%0(), $forinit%3()

    $iftrue%0():
      RET NONE 0

    $forinit%3():
      JMP $forcond%4(%y%3 = I16 0)

    $forcond%4(I16 %y%3):
      JCC %y%3 L I16 30, $forinit%9(), $fordone%7()

    $forinit%9():
      JMP $forcond%10(%x%7 = I16 0)

    $forcond%10(I16 %x%7):
      JCC %x%7 L I16 40, $fortrue%11(), $fordone%13()

    $fortrue%11():
      I8 %s%9 = CALLR @get_board(%x = %x%7, %y = %y%13)
      I16 %px%14 = MULS %x%7, I16 8
      I16 %py%17 = MULS %y%3, I16 8
      I8 %20 = AND %s%9, I8 128
      JCC %20 NE NONE 0, $iftrue%14(), $else%15()

    $iftrue%14():
      I8 %23 = AND %s%9, NONE 64
      JCC %23 NE NONE 0, $iftrue%22(), $else%23()

    $iftrue%22():
      CALLN @_sprites.draw(%sp = @_spritedata.flag, %x = %px%14, %y = %py%17)
      JMP $endif%16()

    $endif%16():
      JMP $forupd%12()

    $forupd%12():
      I16 %x%30 = ADD %x%7, I16 1
      JMP $forcond%10(%x%7 = %x%30)

    $else%23():
      I8 %35 = AND %s%9, I8 32
      JCC %35 NE NONE 0, $iftrue%25(), $else%26()

    $iftrue%25():
      CALLN @_sprites.draw(%sp = @_spritedata.bomb_mistake, %x = %px%14, %y = %py%17)
      JMP $endif%16()

    $else%26():
      CALLN @_sprites.draw(%sp = @_spritedata.bomb, %x = %px%14, %y = %py%17)
      JMP $endif%16()

    $else%15():
      I8 %46 = AND %s%9, NONE 64
      JCC %46 NE NONE 0, $iftrue%17(), $else%18()

    $iftrue%17():
      CALLN @_sprites.draw(%sp = @_spritedata.flag_mistake, %x = %px%14, %y = %py%17)
      JMP $endif%16()

    $else%18():
      I8 %60 = AND %s%9, I8 32
      I8 %63 = SELECT %partial E NONE 0, NONE 1, NONE 0
      I8 %59 = OR %60, %63
      JCC %59 NE NONE 0, $iftrue%20(), $endif%16()

    $iftrue%20():
      I8 %76 = AND %s%9, NONE 7
      I32 %79 = ZX %76
      I32 %80 = MULU %79, I32 4
      I32 %74 = ADD @number_sprites, %80
      I32 %73 = LOAD %74
      CALLN @_sprites.draw(%sp = %73, %x = %px%14, %y = %py%17)
      JMP $endif%16()

    $fordone%13():
      JMP $forupd%6()

    $forupd%6():
      I16 %y%86 = ADD %y%3, I16 1
      JMP $forcond%4(%y%3 = %y%86)

    $fordone%7():
      RET NONE 0
  }

  func NONE @reset() {
    $entry():
      CALLN @_util.disable_interrupts()
      STORE I16 20 -> @cursor_x
      STORE I16 15 -> @cursor_y
      STORE I8 1 -> @is_first_move
      STORE I8 0 -> @is_gameover
      CALLN @init_screen()
      I16 %9 = LOAD @cursor_x
      I16 %8 = MULS %9, I16 8
      I16 %12 = LOAD @cursor_y
      I16 %11 = MULS %12, I16 8
      CALLN @_sprites.draw_transparent(%sp = @_spritedata.cursor, %x = %8, %y = %11)
      CALLN @_util.enable_interrupts()
      RET NONE 0
  }

  func NONE @key_down(I8 %k) {
    $entry():
      I8 %0 = LOAD @is_gameover
      JCC %0 NE NONE 0, $iftrue%0(), $endif%1()

    $iftrue%0():
      JCC %k E I8 10, $iftrue%2(), $endif%3()

    $iftrue%2():
      CALLN @reset()
      JMP $endif%3()

    $endif%3():
      RET NONE 0

    $endif%1():
      JCC %k E I8 38, $iftrue%4(), $elseif%5()

    $iftrue%4():
      CALLN @move_cursor(%dx = I16 0, %dy = I16 -1)
      JMP $endif%17()

    $endif%17():
      RET NONE 0

    $elseif%5():
      JCC %k E I8 40, $elseiftrue%6(), $elseif%7()

    $elseiftrue%6():
      CALLN @move_cursor(%dx = I16 0, %dy = I16 1)
      JMP $endif%17()

    $elseif%7():
      JCC %k E I8 37, $elseiftrue%8(), $elseif%9()

    $elseiftrue%8():
      CALLN @move_cursor(%dx = I16 -1, %dy = I16 0)
      JMP $endif%17()

    $elseif%9():
      JCC %k E I8 39, $elseiftrue%10(), $elseif%11()

    $elseiftrue%10():
      CALLN @move_cursor(%dx = I16 1, %dy = I16 0)
      JMP $endif%17()

    $elseif%11():
      JCC %k E I8 90, $elseiftrue%12(), $elseif%13()

    $elseiftrue%12():
      I16 %27 = LOAD @cursor_x
      I16 %28 = LOAD @cursor_y
      CALLN @make_move(%x = %27, %y = %28, %flag = I8 0)
      JMP $endif%17()

    $elseif%13():
      JCC %k E I8 88, $elseiftrue%14(), $elseif%15()

    $elseiftrue%14():
      I16 %33 = LOAD @cursor_x
      I16 %34 = LOAD @cursor_y
      CALLN @make_move(%x = %33, %y = %34, %flag = I8 1)
      JMP $endif%17()

    $elseif%15():
      JCC %k E I8 10, $elseiftrue%16(), $endif%17()

    $elseiftrue%16():
      CALLN @reset()
      JMP $endif%17()
  }

  func NONE @reveal_tile(I16 %x, I16 %y) {
    $entry():
      I8 %s%0 = CALLR @get_board(%x = %x, %y = %y)
      I8 %5 = AND %s%0, NONE 32
      I8 %8 = AND %s%0, NONE 64
      I8 %4 = OR %5, %8
      JCC %4 NE NONE 0, $iftrue%0(), $elseif%1()

    $iftrue%0():
      RET NONE 0

    $elseif%1():
      I8 %11 = AND %s%0, I8 128
      JCC %11 NE NONE 0, $elseiftrue%2(), $endif%3()

    $elseiftrue%2():
      I8 %17 = OR %s%0, I8 32
      CALLN @set_board(%x = %x, %y = %y, %d = %17)
      CALLN @show_solution(%partial = I8 1)
      STORE I8 1 -> @is_gameover
      RET NONE 0

    $endif%3():
      I8 %26 = OR %s%0, I8 32
      CALLN @set_board(%x = %x, %y = %y, %d = %26)
      CALLN @render_tile(%x = %x, %y = %y)
      I8 %34 = AND %s%0, I8 128
      I8 %33 = SELECT %34 E NONE 0, NONE 1, NONE 0
      I8 %39 = AND %s%0, NONE 7
      I8 %38 = SELECT %39 E NONE 0, NONE 1, NONE 0
      I8 %32 = AND %33, %38
      JCC %32 NE NONE 0, $iftrue%4(), $endif%5()

    $iftrue%4():
      CALLN @reveal_around(%x = %x, %y = %y)
      JMP $endif%5()

    $endif%5():
      RET NONE 0
  }

  func I8 @get_board(I16 %x, I16 %y) {
    $entry():
      I16 %4 = MULS %y, I16 40
      I16 %3 = ADD %4, %x
      I32 %8 = ZX %3
      I32 %1 = ADD @board_state, %8
      I8 %0 = LOAD %1
      RET %0
  }

  func NONE @main() {
    $entry():
      CALLN @_util.disable_interrupts()
      CALLN @_ivt.set_keyup_function(%func = @key_up)
      CALLN @_ivt.set_keydown_function(%func = @key_down)
      CALLN @_gutil.set_palette(%palette = @_palettes.p1)
      CALLN @setup_sprites()
      CALLN @reset()
      JMP $whiletrue%2()

    $whiletrue%2():
      CALLN @_util.halt()
      JMP $whiletrue%2()
  }

  func NONE @move_cursor(I16 %dx, I16 %dy) {
    $entry():
      I16 %1 = LOAD @cursor_x
      I16 %2 = LOAD @cursor_y
      CALLN @render_tile(%x = %1, %y = %2)
      I16 %4 = LOAD @cursor_x
      I16 %cursor_x%3 = ADD %4, %dx
      STORE %cursor_x%3 -> @cursor_x
      I16 %7 = LOAD @cursor_y
      I16 %cursor_y%6 = ADD %7, %dy
      STORE %cursor_y%6 -> @cursor_y
      I16 %9 = LOAD @cursor_x
      JCC %9 L I16 0, $iftrue%0(), $endif%1()

    $iftrue%0():
      STORE I16 0 -> @cursor_x
      JMP $endif%1()

    $endif%1():
      I16 %12 = LOAD @cursor_x
      JCC %12 GE I16 40, $iftrue%2(), $endif%3()

    $iftrue%2():
      STORE I16 39 -> @cursor_x
      JMP $endif%3()

    $endif%3():
      I16 %15 = LOAD @cursor_y
      JCC %15 L I16 0, $iftrue%4(), $endif%5()

    $iftrue%4():
      STORE I16 0 -> @cursor_y
      JMP $endif%5()

    $endif%5():
      I16 %18 = LOAD @cursor_y
      JCC %18 GE I16 30, $iftrue%6(), $endif%7()

    $iftrue%6():
      STORE I16 29 -> @cursor_y
      JMP $endif%7()

    $endif%7():
      I16 %24 = LOAD @cursor_x
      I16 %23 = MULS %24, I16 8
      I16 %27 = LOAD @cursor_y
      I16 %26 = MULS %27, I16 8
      CALLN @_sprites.draw_transparent(%sp = @_spritedata.cursor, %x = %23, %y = %26)
      RET NONE 0
  }

  func NONE @setup_sprites() {
    $entry():
      STORE @_spritedata.empty_square -> @number_sprites
      I32 %7 = MULU I32 1, I32 4
      I32 %4 = ADD @number_sprites, %7
      STORE @_spritedata.c1 -> %4
      I32 %12 = MULU I32 2, I32 4
      I32 %9 = ADD @number_sprites, %12
      STORE @_spritedata.c2 -> %9
      I32 %17 = MULU I32 3, I32 4
      I32 %14 = ADD @number_sprites, %17
      STORE @_spritedata.c3 -> %14
      I32 %22 = MULU I32 4, I32 4
      I32 %19 = ADD @number_sprites, %22
      STORE @_spritedata.c4 -> %19
      I32 %27 = MULU I32 5, I32 4
      I32 %24 = ADD @number_sprites, %27
      STORE @_spritedata.c5 -> %24
      I32 %32 = MULU I32 6, I32 4
      I32 %29 = ADD @number_sprites, %32
      STORE @_spritedata.c6 -> %29
      I32 %37 = MULU I32 7, I32 4
      I32 %34 = ADD @number_sprites, %37
      STORE @_spritedata.c7 -> %34
      I32 %42 = MULU I32 8, I32 4
      I32 %39 = ADD @number_sprites, %42
      STORE @_spritedata.c8 -> %39
      RET NONE 0
  }

  func NONE @key_up(I8 %k) {
    $entry():
      RET NONE 0
  }

  func NONE @set_board(I16 %x, I16 %y, I8 %d) {
    $entry():
      I16 %3 = MULS %y, I16 40
      I16 %2 = ADD %3, %x
      I32 %7 = ZX %2
      I32 %0 = ADD @board_state, %7
      STORE %d -> %0
      RET NONE 0
  }
}
