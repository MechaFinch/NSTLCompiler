
define asdf is 65;

type x is u8;
type c is y pointer;
type y is u8 pointer;
type z is y pointer;
type b is u8 array size 5 as u32 < 12 + 12 + 5 - sizeof x * -3;
type d is z pointer;

type a is structure of
	x is u8,
	y is u16,
	z is u32,
	q is d
end type

variable test is a gets a of
	x gets 1,
	y gets 12 + asdf,
	z gets 0,
	q gets 23
end structure;

define bufsize is 320 * 240;
constant fdsa is x gets asdf;
variable buf is u8 pointer gets 0xF0020000;
variable halter is u8 array size 2;
--variable test is u16 gets bufsize - (buf index 0);

external function balls of u8 a, u16 b, u32 returns none;

function main of none begin

    buf index (320 * 240) + (0xFF * 3) + 0 gets 0xFF;
    buf index (320 * 240) + (0xFF * 3) + 1 gets 0xFF;
    buf index (320 * 240) + (0xFF * 3) + 2 gets 0xFF; 

	call sieve with buf, bufsize;
	
	halter index 0 gets 0x01;
	halter index 1 gets 0xE0;
	
	while true do
		call (to halter) with none;
	end while
end function

function sieve of u8 pointer flags, u32 max begin
	for i is u32 gets 0; i < max; i gets i + 1 do
		flags index i gets 0xFF;
	end for
	
	variable p is u32 gets 2;
	while p < max do
		if (flags index p) != 0xFF then
			p gets p + 1;
			continue;
		end if
		
		for i is u32 gets (p << 1); i < max; i gets i + p do
			flags index i gets 0;
		end for
		
		p gets p + 1;
	end while
end function
