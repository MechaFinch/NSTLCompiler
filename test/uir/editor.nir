Module editor {
  const NONE @true: 1
  const NONE @false: 0

  external func I16 @_termutil.get_pos()
  external func NONE @_termutil.set_color(I8 %fgc, I8 %bgc)
  external func NONE @_os.defer()
  external func NONE @_editor.draw_region(I32 %region)
  external func NONE @_termutil.set_pos_direct(I8 %x, I8 %y)
  external func I32 @_os.realloc(I32 %block, I32 %n)
  external func I32 @_os.write_file(I16 %handle_id, I32 %buffer_length, I32 %buffer_ptr)
  external func I32 @_os.seek_file(I16 %handle_id, I16 %flags, I32 %value)
  external func I16 @_util.mulh8(I8 %a, I8 %b)
  external func I16 @_util.enable_interrupts()
  external func NONE @_util.set_pf(I16 %arg0)
  external func I8 @_util.mod8(I8 %a, I8 %b)
  external func NONE @_editor.set_term_area(I32 %region)
  external func I8 @_util.mods8(I8 %a, I8 %b)
  external func I16 @_util.mod16(I16 %a, I16 %b)
  external func NONE @_os.close_file(I16 %handle_id)
  external func NONE @_util.memcopy(I32 %source, I32 %dest, I32 %length)
  external func I32 @_util.mulsh16(I16 %a, I16 %b)
  external func NONE @_os.exit()
  external func I16 @_util.get_pf()
  external func I8 @_util.abs8(I8 %a)
  external func I32 @_util.abs32(I16 %a)
  external func I32 @_util.atomic_call(I32 %desc, I32 %args)
  external func I16 @_util.mulsh8(I8 %a, I8 %b)
  external func NONE @_termutil.set_enabled(I8 %enabled)
  external func I8 @_editor.edit_region(I32 %region, I8 %edit)
  external func I32 @_os.calloc(I32 %n)
  external func I32 @_os.rcalloc(I32 %block, I32 %n)
  external func NONE @_os.init(I32 %dram_start, I32 %dram_size)
  external func NONE @_termutil.clear_term()
  external func NONE @_termutil.print_char(I8 %c)
  external func I16 @_util.mods16(I16 %a, I16 %b)
  external func I32 @_os.read_file(I16 %handle_id, I32 %buffer_length, I32 %buffer_ptr)
  external func I32 @_util.mulh16(I16 %a, I16 %b)
  external func NONE @_util.halt()
  external func NONE @_termutil.set_pos(I8 %x, I8 %y)
  external func NONE @_os.free(I32 %block)
  external func I16 @_editor.get_index_of(I32 %region, I8 %x, I8 %y)
  external func NONE @_os.change_file_attr(I16 %handle_id, I16 %flags)
  external func I32 @_os.get_term_area()
  external func I16 @_os.get_term_pos()
  external func I16 @_os.open_file(I16 %flags, I16 %name_len, I32 %name_ptr)
  external func NONE @_termutil.set_term_bounds(I8 %min_x, I8 %min_y, I8 %max_x, I8 %max_y)
  external func NONE @_termutil.set_fgc(I8 %c)
  external func I16 @_util.abs16(I16 %a)
  external func NONE @_os.get_file_pos(I16 %handle_id, I32 %read_ptr, I32 %write_ptr)
  external func NONE @_util.buffer_screen()
  external func NONE @_termutil.set_bgc(I8 %c)
  external func I8 @_editor.get_char_at(I32 %region, I8 %x, I8 %y)
  external func I32 @_os.malloc(I32 %n)
  external func I8 @_os.get_key_state(I8 %key)
  external func I32 @_editor.create_region(I8 %sox, I8 %soy, I8 %sw, I8 %sh, I16 %max_lines)
  external func I16 @_editor.get_index(I32 %region)
  external func NONE @_util.unbuffer_screen()
  external func I16 @_util.disable_interrupts()

  func I8 @line_has_after(I32 %region) {
    $entry():
      I16 %i%0 = CALLR @get_index(%region = %region)
      I32 %4 = ADD %region, I32 8
      I8 %x%3 = LOAD %4
      JMP $whilecond%1(%i%20 = %i%0, %x%7 = %x%3)

    $whilecond%1(I8 %x%7, I16 %i%20):
      I32 %10 = ADD %region, I32 2
      I8 %9 = LOAD %10
      I8 %8 = SUB %9, I8 1
      JCC %x%7 B %8, $whiletrue%2(), $whiledone%3()

    $whiletrue%2():
      I32 %17 = ADD %region, I32 12
      I32 %16 = LOAD %17
      I32 %21 = ZX %i%20
      I32 %15 = ADD %16, %21
      I8 %14 = LOAD %15
      JCC %14 NE I8 32, $iftrue%4(), $endif%5()

    $iftrue%4():
      RET I8 1

    $endif%5():
      I8 %x%24 = ADD %x%7, I8 1
      I16 %i%27 = ADD %i%20, I16 1
      JMP $whilecond%1(%i%20 = %i%27, %x%7 = %x%24)

    $whiledone%3():
      RET I8 0
  }

  func I32 @create_region(I8 %sox, I8 %soy, I8 %sw, I8 %sh, I16 %max_lines) {
    $entry():
      I16 %3 = ZX %sw
      I16 %2 = ADD %3, I16 1
      I16 %buff_size%0 = MULU %max_lines, %2
      I32 %region%6 = CALLR @_os.malloc(%n = I32 18)
      I32 %11 = ZX %buff_size%0
      I32 %buffer%9 = CALLR @_os.malloc(%n = %11)
      STORE %sox -> %region%6
      I32 %16 = ADD %region%6, I32 1
      STORE %soy -> %16
      I32 %19 = ADD %region%6, I32 2
      STORE %sw -> %19
      I32 %22 = ADD %region%6, I32 3
      STORE %sh -> %22
      I32 %25 = ADD %region%6, I32 4
      STORE %max_lines -> %25
      I32 %28 = ADD %region%6, I32 6
      STORE I16 0 -> %28
      I32 %31 = ADD %region%6, I32 8
      STORE I8 0 -> %31
      I32 %34 = ADD %region%6, I32 9
      STORE I8 0 -> %34
      I32 %37 = ADD %region%6, I32 10
      STORE I8 1 -> %37
      I32 %40 = ADD %region%6, I32 11
      STORE I8 255 -> %40
      I32 %43 = ADD %region%6, I32 12
      STORE %buffer%9 -> %43
      I32 %46 = ADD %region%6, I32 16
      STORE %buff_size%0 -> %46
      JMP $forinit%1()

    $forinit%1():
      JMP $forcond%2(%i%75 = I16 0, %ln%52 = I16 0)

    $forcond%2(I16 %ln%52, I16 %i%75):
      JCC %ln%52 B %max_lines, $fortrue%3(), $fordone%5()

    $fortrue%3():
      JMP $forinit%7()

    $forinit%7():
      JMP $forcond%8(%j%57 = I16 0, %i%65 = %i%75)

    $forcond%8(I16 %j%57, I16 %i%65):
      I16 %58 = ZX %sw
      JCC %j%57 B %58, $fortrue%9(), $fordone%11()

    $fortrue%9():
      I32 %66 = ZX %i%65
      I32 %61 = ADD %buffer%9, %66
      STORE I8 32 -> %61
      I16 %i%68 = ADD %i%65, I16 1
      JMP $forupd%10()

    $forupd%10():
      I16 %j%71 = ADD %j%57, I16 1
      JMP $forcond%8(%j%57 = %j%71, %i%65 = %i%68)

    $fordone%11():
      I32 %80 = ZX %i%65
      I32 %77 = ADD %buffer%9, %80
      STORE I8 10 -> %77
      I16 %i%82 = ADD %i%65, I16 1
      JMP $forupd%4()

    $forupd%4():
      I16 %ln%85 = ADD %ln%52, I16 1
      JMP $forcond%2(%i%75 = %i%82, %ln%52 = %ln%85)

    $fordone%5():
      RET %region%6
  }

  func I8 @get_char_at(I32 %region, I8 %x, I8 %y) {
    $entry():
      I32 %3 = ADD %region, I32 12
      I32 %2 = LOAD %3
      I16 %5 = CALLR @get_index_of(%x = %x, %y = %y, %region = %region)
      I32 %10 = ZX %5
      I32 %1 = ADD %2, %10
      I8 %0 = LOAD %1
      RET %0
  }

  func I8 @line_after_last_char_x(I32 %region) {
    $entry():
      I32 %6 = ADD %region, I32 9
      I8 %5 = LOAD %6
      I16 %i%1 = CALLR @get_index_of(%x = I8 0, %y = %5, %region = %region)
      JMP $forinit%1()

    $forinit%1():
      JMP $forcond%2(%x%10 = I8 0, %i%21 = %i%1, %lx%35 = I8 255)

    $forcond%2(I8 %x%10, I16 %i%21, I8 %lx%35):
      I32 %12 = ADD %region, I32 2
      I8 %11 = LOAD %12
      JCC %x%10 B %11, $fortrue%3(), $fordone%5()

    $fortrue%3():
      I32 %18 = ADD %region, I32 12
      I32 %17 = LOAD %18
      I32 %22 = ZX %i%21
      I32 %16 = ADD %17, %22
      I8 %15 = LOAD %16
      JCC %15 NE I8 32, $iftrue%6(), $endif%7(%lx%36 = %lx%35)

    $iftrue%6():
      JMP $endif%7(%lx%36 = %x%10)

    $endif%7(I8 %lx%36):
      I16 %i%25 = ADD %i%21, I16 1
      JMP $forupd%4()

    $forupd%4():
      I8 %x%29 = ADD %x%10, I8 1
      JMP $forcond%2(%x%10 = %x%29, %i%21 = %i%25, %lx%35 = %lx%36)

    $fordone%5():
      I32 %39 = ADD %region, I32 2
      I8 %38 = LOAD %39
      I8 %37 = SUB %38, I8 1
      JCC %lx%35 B %37, $iftrue%8(), $else%9()

    $iftrue%8():
      I8 %42 = ADD %lx%35, I8 1
      RET %42

    $else%9():
      RET %lx%35
  }

  func NONE @unhighlight(I32 %region, I8 %ax, I8 %ay, I8 %c) {
    $entry():
      I32 %2 = ADD %region, I32 10
      I8 %1 = LOAD %2
      I32 %5 = ADD %region, I32 11
      I8 %4 = LOAD %5
      CALLN @_termutil.set_color(%bgc = %4, %fgc = %1)
      CALLN @_termutil.set_pos_direct(%x = %ax, %y = %ay)
      CALLN @_termutil.print_char(%c = %c)
      RET NONE 0
  }

  func NONE @move_cursor_up(I32 %region) {
    $entry():
      I32 %1 = ADD %region, I32 9
      I8 %0 = LOAD %1
      JCC %0 E I8 0, $iftrue%0(), $else%1()

    $iftrue%0():
      CALLN @move_window_up(%region = %region)
      JMP $endif%2()

    $endif%2():
      RET NONE 0

    $else%1():
      I32 %6 = ADD %region, I32 9
      I32 %10 = ADD %region, I32 9
      I8 %9 = LOAD %10
      I8 %8 = SUB %9, I8 1
      STORE %8 -> %6
      JMP $endif%2()
  }

  func NONE @move_window_up(I32 %region) {
    $entry():
      I32 %1 = ADD %region, I32 6
      I16 %0 = LOAD %1
      JCC %0 NE I16 0, $iftrue%0(), $endif%1()

    $iftrue%0():
      I32 %4 = ADD %region, I32 6
      I32 %8 = ADD %region, I32 6
      I16 %7 = LOAD %8
      I16 %6 = SUB %7, I16 1
      STORE %6 -> %4
      CALLN @draw_region(%region = %region)
      JMP $endif%1()

    $endif%1():
      RET NONE 0
  }

  func NONE @set_term_area(I32 %region) {
    $entry():
      I32 %2 = ADD %region, I32 10
      I8 %1 = LOAD %2
      I32 %5 = ADD %region, I32 11
      I8 %4 = LOAD %5
      CALLN @_termutil.set_color(%bgc = %4, %fgc = %1)
      I8 %8 = LOAD %region
      I32 %12 = ADD %region, I32 1
      I8 %11 = LOAD %12
      I8 %16 = LOAD %region
      I32 %20 = ADD %region, I32 2
      I8 %19 = LOAD %20
      I8 %15 = ADD %16, %19
      I8 %14 = SUB %15, I8 1
      I32 %25 = ADD %region, I32 1
      I8 %24 = LOAD %25
      I32 %28 = ADD %region, I32 3
      I8 %27 = LOAD %28
      I8 %23 = ADD %24, %27
      CALLN @_termutil.set_term_bounds(%min_x = %8, %min_y = %11, %max_y = %23, %max_x = %14)
      I32 %33 = ADD %region, I32 8
      I8 %32 = LOAD %33
      I8 %35 = LOAD %region
      I8 %31 = ADD %32, %35
      I32 %40 = ADD %region, I32 9
      I8 %39 = LOAD %40
      I32 %43 = ADD %region, I32 1
      I8 %42 = LOAD %43
      I8 %38 = ADD %39, %42
      CALLN @_termutil.set_pos(%x = %31, %y = %38)
      RET NONE 0
  }

  func I8 @edit_region(I32 %region, I8 %edit) {
    $entry():
      CALLN @draw_region(%region = %region)
      I32 %input_buffer%3 = STACK NONE 2
      JMP $whilecond%1()

    $whilecond%1():
      JMP $whiletrue%2()

    $whiletrue%2():
      JCC %edit NE NONE 0, $iftrue%4(), $else%5()

    $iftrue%4():
      I16 %i%7 = CALLR @get_index(%region = %region%10)
      I32 %14 = ADD %region, I32 12
      I32 %13 = LOAD %14
      I32 %17 = ZX %i%7
      I32 %12 = ADD %13, %17
      I8 %c%11 = LOAD %12
      I32 %20 = ADD %region, I32 8
      I8 %19 = LOAD %20
      I8 %22 = LOAD %region
      I8 %abs_x%18 = ADD %19, %22
      I32 %27 = ADD %region, I32 9
      I8 %26 = LOAD %27
      I32 %30 = ADD %region, I32 1
      I8 %29 = LOAD %30
      I8 %abs_y%25 = ADD %26, %29
      CALLN @highlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %c%11)
      CALLN @_os.read_file(%handle_id = I16 0, %buffer_ptr = %input_buffer%41, %buffer_length = I32 1)
      I8 %43 = LOAD %input_buffer%3
      I8 %shift%42 = AND %43, I8 128
      I8 %49 = LOAD %input_buffer%3
      I8 %input%48 = AND %49, I8 127
      JCC %input%48 E I8 21, $iftrue%13(), $elseif%14()

    $iftrue%13():
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %c%11)
      CALLN @move_cursor_left(%region = %region%10)
      JMP $endif%30()

    $endif%30():
      JMP $endif%6()

    $endif%6():
      JMP $whilecond%1()

    $elseif%14():
      JCC %input%48 E I8 23, $elseiftrue%15(), $elseif%16()

    $elseiftrue%15():
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %c%11)
      I8 %73 = CALLR @line_has_after(%region = %region%10)
      JCC %73 NE NONE 0, $iftrue%44(), $else%45()

    $iftrue%44():
      CALLN @move_cursor_right(%region = %region%10)
      JMP $endif%46()

    $endif%46():
      JMP $endif%30()

    $else%45():
      I32 %78 = ADD %region, I32 8
      STORE I8 0 -> %78
      CALLN @move_cursor_down(%region = %region%10)
      JMP $endif%46()

    $elseif%16():
      JCC %input%48 E I8 22, $elseiftrue%17(), $elseif%18()

    $elseiftrue%17():
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %c%11)
      CALLN @move_cursor_up(%region = %region%10)
      JMP $endif%30()

    $elseif%18():
      JCC %input%48 E I8 24, $elseiftrue%19(), $elseif%20()

    $elseiftrue%19():
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %c%11)
      CALLN @move_cursor_down(%region = %region%10)
      JMP $endif%30()

    $elseif%20():
      I8 %102 = SELECT %input%48 E NONE 9, @true, @false
      I8 %105 = SELECT %input%48 E NONE 27, @true, @false
      I8 %101 = OR %102, %105
      JCC %101 NE NONE 0, $elseiftrue%21(), $elseif%22()

    $elseiftrue%21():
      I8 %input%108 = OR %input%48, %shift%42
      RET %input%108

    $elseif%22():
      JCC %input%48 E I8 8, $elseiftrue%23(), $elseif%24()

    $elseiftrue%23():
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %c%11)
      I32 %120 = ADD %region, I32 8
      I8 %119 = LOAD %120
      JCC %119 E I8 0, $iftrue%39(), $elseif%40()

    $iftrue%39():
      I32 %126 = ADD %region, I32 9
      I8 %125 = LOAD %126
      CALLN @copy_up(%destination_y = %125, %region = %region%10)
      CALLN @draw_region(%region = %region%10)
      CALLN @move_cursor_left(%region = %region%10)
      I16 %i%132 = CALLR @get_index(%region = %region%10)
      I32 %137 = ADD %region, I32 12
      I32 %136 = LOAD %137
      I32 %140 = ZX %i%132
      I32 %135 = ADD %136, %140
      STORE I8 32 -> %135
      JMP $endif%43()

    $endif%43():
      JMP $endif%30()

    $elseif%40():
      I8 %142 = CALLR @line_has_after(%region = %region%10)
      JCC %142 NE NONE 0, $elseiftrue%41(), $else%42()

    $elseiftrue%41():
      I32 %151 = ADD %region, I32 9
      I8 %150 = LOAD %151
      I8 %149 = ADD %150, I8 1
      I16 %next_line_i%145 = CALLR @get_index_of(%x = I8 0, %y = %149, %region = %region%10)
      I32 %157 = ADD %region, I32 12
      I32 %156 = LOAD %157
      I32 %159 = ZX %i%7
      I32 %155 = ADD %156, %159
      I32 %163 = ADD %region, I32 12
      I32 %162 = LOAD %163
      I16 %166 = SUB %i%7, NONE 1
      I32 %165 = ZX %166
      I32 %161 = ADD %162, %165
      I16 %171 = SUB %next_line_i%145, NONE 2
      I16 %170 = SUB %171, %i%7
      I32 %169 = ZX %170
      CALLN @_util.memcopy(%source = %155, %dest = %161, %length = %169)
      CALLN @move_cursor_left(%region = %region%10)
      CALLN @draw_region(%region = %region%10)
      JMP $endif%43()

    $else%42():
      CALLN @move_cursor_left(%region = %region%10)
      I16 %i%181 = CALLR @get_index(%region = %region%10)
      I32 %186 = ADD %region, I32 12
      I32 %185 = LOAD %186
      I32 %189 = ZX %i%181
      I32 %184 = ADD %185, %189
      STORE I8 32 -> %184
      JMP $endif%43()

    $elseif%24():
      JCC %input%48 E I8 10, $elseiftrue%25(), $elseif%26()

    $elseiftrue%25():
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = I8 32)
      I32 %203 = ADD %region, I32 9
      I8 %202 = LOAD %203
      I8 %201 = ADD %202, I8 1
      I8 %198 = CALLR @copy_down(%start_y = %201, %region = %region%10)
      JCC %198 NE NONE 0, $iftrue%31(), $endif%32()

    $iftrue%31():
      I16 %i%206 = CALLR @get_index(%region = %region%10)
      I32 %212 = ADD %region, I32 2
      I8 %211 = LOAD %212
      I32 %210 = ZX %211
      I32 %line_size%209 = ADD %210, I32 1
      I32 %221 = ADD %region, I32 9
      I8 %220 = LOAD %221
      I8 %219 = ADD %220, I8 1
      I16 %next_line_i%215 = CALLR @get_index_of(%x = I8 0, %y = %219, %region = %region%10)
      I32 %227 = ADD %region, I32 12
      I32 %226 = LOAD %227
      I32 %229 = ZX %i%206
      I32 %225 = ADD %226, %229
      I32 %233 = ADD %region, I32 12
      I32 %232 = LOAD %233
      I32 %235 = ZX %next_line_i%215
      I32 %231 = ADD %232, %235
      I32 %240 = ADD %region, I32 2
      I8 %239 = LOAD %240
      I32 %243 = ADD %region, I32 8
      I8 %242 = LOAD %243
      I8 %238 = SUB %239, %242
      I32 %237 = ZX %238
      CALLN @_util.memcopy(%source = %225, %dest = %231, %length = %237)
      JMP $forinit%34()

    $forinit%34():
      JMP $forcond%35(%x%247 = I8 0)

    $forcond%35(I8 %x%247):
      I32 %250 = ADD %region, I32 2
      I8 %249 = LOAD %250
      I32 %254 = ADD %region, I32 8
      I8 %253 = LOAD %254
      I8 %248 = SUB %249, %253
      JCC %x%247 B %248, $fortrue%36(), $fordone%38()

    $fortrue%36():
      I32 %258 = ADD %region, I32 12
      I32 %257 = LOAD %258
      I16 %263 = ZX %x%247
      I16 %260 = ADD %i%206, %263
      I32 %265 = ZX %260
      I32 %256 = ADD %257, %265
      STORE I8 32 -> %256
      JMP $forupd%37()

    $forupd%37():
      I8 %x%267 = ADD %x%247, I8 1
      JMP $forcond%35(%x%247 = %x%267)

    $fordone%38():
      CALLN @draw_region(%region = %region%10)
      JMP $endif%32()

    $endif%32():
      I32 %272 = ADD %region, I32 8
      STORE I8 0 -> %272
      CALLN @move_cursor_down(%region = %region%274)
      JMP $endif%30()

    $elseif%26():
      JCC %input%48 E I8 127, $elseiftrue%27(), $elseif%28()

    $elseiftrue%27():
      I32 %282 = ADD %region, I32 12
      I32 %281 = LOAD %282
      I32 %285 = ZX %i%7
      I32 %280 = ADD %281, %285
      STORE I8 32 -> %280
      JMP $endif%30()

    $elseif%28():
      I8 %288 = SELECT %input%48 AE NONE 32, @true, @false
      I8 %291 = SELECT %input%48 B NONE 127, @true, @false
      I8 %287 = AND %288, %291
      JCC %287 NE NONE 0, $elseiftrue%29(), $endif%30()

    $elseiftrue%29():
      I32 %296 = ADD %region, I32 12
      I32 %295 = LOAD %296
      I32 %299 = ZX %i%7
      I32 %294 = ADD %295, %299
      STORE %input%48 -> %294
      CALLN @unhighlight(%region = %region%10, %ax = %abs_x%18, %ay = %abs_y%25, %c = %input%48)
      CALLN @move_cursor_right(%region = %region%10)
      JMP $endif%30()

    $else%5():
      CALLN @_os.read_file(%handle_id = I16 0, %buffer_ptr = %input_buffer%41, %buffer_length = I32 1)
      I8 %313 = LOAD %input_buffer%3
      I8 %shift%312 = AND %313, I8 128
      I8 %319 = LOAD %input_buffer%3
      I8 %input%318 = AND %319, I8 127
      JCC %input%318 E I8 22, $iftrue%7(), $elseif%8()

    $iftrue%7():
      CALLN @move_window_up(%region = %region%10)
      JMP $endif%12()

    $endif%12():
      JMP $endif%6()

    $elseif%8():
      JCC %input%318 E I8 24, $elseiftrue%9(), $elseif%10()

    $elseiftrue%9():
      CALLN @move_window_down(%region = %region%10)
      JMP $endif%12()

    $elseif%10():
      I8 %349 = SELECT %input%318 E NONE 9, @true, @false
      I8 %352 = SELECT %input%318 E NONE 27, @true, @false
      I8 %348 = OR %349, %352
      JCC %348 NE NONE 0, $elseiftrue%11(), $endif%12()

    $elseiftrue%11():
      I8 %input%355 = OR %input%318, %shift%312
      RET %input%355

    $whiledone%3():
      RET NONE 0
  }

  func NONE @highlight(I32 %region, I8 %ax, I8 %ay, I8 %c) {
    $entry():
      I32 %2 = ADD %region, I32 11
      I8 %1 = LOAD %2
      I32 %5 = ADD %region, I32 10
      I8 %4 = LOAD %5
      CALLN @_termutil.set_color(%bgc = %4, %fgc = %1)
      CALLN @_termutil.set_pos_direct(%x = %ax, %y = %ay)
      CALLN @_termutil.print_char(%c = %c)
      RET NONE 0
  }

  func I16 @get_index_of(I32 %region, I8 %x, I8 %y) {
    $entry():
      I32 %2 = ADD %region, I32 6
      I16 %1 = LOAD %2
      I16 %4 = ZX %y
      I16 %line%0 = ADD %1, %4
      I32 %12 = ADD %region, I32 2
      I8 %11 = LOAD %12
      I16 %10 = ZX %11
      I16 %9 = ADD %10, I16 1
      I16 %7 = MULU %line%0, %9
      I16 %15 = ZX %x
      I16 %6 = ADD %7, %15
      RET %6
  }

  func NONE @copy_up(I32 %region, I8 %destination_y) {
    $entry():
      I16 %i%0 = CALLR @get_index_of(%x = I8 0, %y = %destination_y, %region = %region)
      I32 %7 = ADD %region, I32 12
      I32 %6 = LOAD %7
      I32 %9 = ZX %i%0
      I32 %dest_ptr%5 = ADD %6, %9
      I32 %14 = ADD %region, I32 2
      I8 %13 = LOAD %14
      I32 %12 = ZX %13
      I32 %line_size%11 = ADD %12, I32 1
      I32 %18 = ADD %dest_ptr%5, %line_size%11
      I32 %26 = ADD %region, I32 16
      I16 %25 = LOAD %26
      I16 %24 = SUB %25, %i%0
      I32 %23 = ZX %24
      I32 %22 = SUB %23, %line_size%11
      CALLN @_util.memcopy(%source = %18, %dest = %dest_ptr%5, %length = %22)
      I32 %33 = ADD %region, I32 4
      I16 %32 = LOAD %33
      I16 %31 = SUB %32, I16 1
      I32 %39 = ADD %region, I32 2
      I8 %38 = LOAD %39
      I16 %37 = ZX %38
      I16 %36 = ADD %37, I16 1
      I16 %last_line_i%30 = MULU %31, %36
      JMP $forinit%1()

    $forinit%1():
      JMP $forcond%2(%x%44 = I8 0)

    $forcond%2(I8 %x%44):
      I32 %46 = ADD %region, I32 2
      I8 %45 = LOAD %46
      JCC %x%44 B %45, $fortrue%3(), $fordone%5()

    $fortrue%3():
      I32 %51 = ADD %region, I32 12
      I32 %50 = LOAD %51
      I16 %56 = ZX %x%44
      I16 %53 = ADD %last_line_i%30, %56
      I32 %58 = ZX %53
      I32 %49 = ADD %50, %58
      STORE I8 32 -> %49
      JMP $forupd%4()

    $forupd%4():
      I8 %x%60 = ADD %x%44, I8 1
      JMP $forcond%2(%x%44 = %x%60)

    $fordone%5():
      RET NONE 0
  }

  func NONE @move_cursor_down(I32 %region) {
    $entry():
      I32 %1 = ADD %region, I32 9
      I8 %0 = LOAD %1
      I32 %5 = ADD %region, I32 3
      I8 %4 = LOAD %5
      I8 %3 = SUB %4, I8 1
      JCC %0 B %3, $iftrue%0(), $else%1()

    $iftrue%0():
      I32 %8 = ADD %region, I32 9
      I32 %12 = ADD %region, I32 9
      I8 %11 = LOAD %12
      I8 %10 = ADD %11, I8 1
      STORE %10 -> %8
      JMP $endif%2()

    $endif%2():
      RET NONE 0

    $else%1():
      CALLN @move_window_down(%region = %region)
      JMP $endif%2()
  }

  func NONE @draw_region(I32 %region) {
    $entry():
      CALLN @set_term_area(%region = %region)
      CALLN @_termutil.set_pos(%x = I8 0, %y = I8 0)
      I32 %6 = ADD %region, I32 6
      I16 %ln%5 = LOAD %6
      I32 %13 = ADD %region, I32 2
      I8 %12 = LOAD %13
      I16 %11 = ZX %12
      I16 %10 = ADD %11, I16 1
      I16 %i%8 = MULU %ln%5, %10
      JMP $whilecond%1(%y%21 = I8 0, %ln%28 = %ln%5, %i%44 = %i%8)

    $whilecond%1(I8 %y%21, I16 %ln%28, I16 %i%44):
      I32 %23 = ADD %region, I32 3
      I8 %22 = LOAD %23
      I8 %19 = SELECT %y%21 B %22, @true, @false
      I16 %18 = ZX %19
      I32 %30 = ADD %region, I32 4
      I16 %29 = LOAD %30
      I16 %26 = SELECT %ln%28 B %29, @true, @false
      I16 %17 = AND %18, %26
      JCC %17 NE NONE 0, $whiletrue%2(), $whiledone%3()

    $whiletrue%2():
      I32 %36 = ADD %region, I32 2
      I8 %35 = LOAD %36
      I32 %34 = ZX %35
      I32 %40 = ADD %region, I32 12
      I32 %39 = LOAD %40
      I32 %42 = ZX %i%44
      I32 %38 = ADD %39, %42
      CALLN @_os.write_file(%handle_id = I16 1, %buffer_ptr = %38, %buffer_length = %34)
      I32 %50 = ADD %region, I32 2
      I8 %49 = LOAD %50
      I16 %48 = ZX %49
      I16 %46 = ADD %i%44, %48
      I16 %i%45 = ADD %46, I16 1
      I16 %ln%53 = ADD %ln%28, I16 1
      I8 %y%56 = ADD %y%21, I8 1
      JMP $whilecond%1(%y%21 = %y%56, %ln%28 = %ln%53, %i%44 = %i%45)

    $whiledone%3():
      I32 %62 = ADD %region, I32 8
      I8 %61 = LOAD %62
      I8 %64 = LOAD %region
      I8 %60 = ADD %61, %64
      I32 %69 = ADD %region, I32 9
      I8 %68 = LOAD %69
      I32 %72 = ADD %region, I32 1
      I8 %71 = LOAD %72
      I8 %67 = ADD %68, %71
      CALLN @_termutil.set_pos(%x = %60, %y = %67)
      RET NONE 0
  }

  func NONE @move_window_down(I32 %region) {
    $entry():
      I32 %1 = ADD %region, I32 6
      I16 %0 = LOAD %1
      I32 %6 = ADD %region, I32 4
      I16 %5 = LOAD %6
      I16 %4 = SUB %5, I16 1
      I32 %11 = ADD %region, I32 3
      I8 %10 = LOAD %11
      I16 %9 = ZX %10
      I16 %3 = SUB %4, %9
      JCC %0 B %3, $iftrue%0(), $endif%1()

    $iftrue%0():
      I32 %13 = ADD %region, I32 6
      I32 %17 = ADD %region, I32 6
      I16 %16 = LOAD %17
      I16 %15 = ADD %16, I16 1
      STORE %15 -> %13
      CALLN @draw_region(%region = %region)
      JMP $endif%1()

    $endif%1():
      RET NONE 0
  }

  func I16 @get_index(I32 %region) {
    $entry():
      I32 %2 = ADD %region, I32 6
      I16 %1 = LOAD %2
      I32 %6 = ADD %region, I32 9
      I8 %5 = LOAD %6
      I16 %4 = ZX %5
      I16 %line%0 = ADD %1, %4
      I32 %14 = ADD %region, I32 2
      I8 %13 = LOAD %14
      I16 %12 = ZX %13
      I16 %11 = ADD %12, I16 1
      I16 %9 = MULU %line%0, %11
      I32 %19 = ADD %region, I32 8
      I8 %18 = LOAD %19
      I16 %17 = ZX %18
      I16 %8 = ADD %9, %17
      RET %8
  }

  func NONE @move_cursor_right(I32 %region) {
    $entry():
      I32 %1 = ADD %region, I32 8
      I8 %0 = LOAD %1
      I32 %5 = ADD %region, I32 2
      I8 %4 = LOAD %5
      I8 %3 = SUB %4, I8 1
      JCC %0 B %3, $iftrue%0(), $else%1()

    $iftrue%0():
      I32 %8 = ADD %region, I32 8
      I32 %12 = ADD %region, I32 8
      I8 %11 = LOAD %12
      I8 %10 = ADD %11, I8 1
      STORE %10 -> %8
      JMP $endif%2()

    $endif%2():
      RET NONE 0

    $else%1():
      I32 %15 = ADD %region, I32 8
      STORE I8 0 -> %15
      CALLN @move_cursor_down(%region = %region)
      JMP $endif%2()
  }

  func NONE @move_cursor_left(I32 %region) {
    $entry():
      I32 %1 = ADD %region, I32 8
      I8 %0 = LOAD %1
      JCC %0 E I8 0, $iftrue%0(), $else%1()

    $iftrue%0():
      CALLN @move_cursor_up(%region = %region)
      I32 %6 = ADD %region, I32 8
      I8 %8 = CALLR @line_after_last_char_x(%region = %region)
      STORE %8 -> %6
      JMP $endif%2()

    $endif%2():
      RET NONE 0

    $else%1():
      I32 %11 = ADD %region, I32 8
      I32 %15 = ADD %region, I32 8
      I8 %14 = LOAD %15
      I8 %13 = SUB %14, I8 1
      STORE %13 -> %11
      JMP $endif%2()
  }

  func I8 @copy_down(I32 %region, I8 %start_y) {
    $entry():
      I16 %1 = ZX %start_y
      I32 %4 = ADD %region, I32 6
      I16 %3 = LOAD %4
      I16 %0 = ADD %1, %3
      I32 %8 = ADD %region, I32 4
      I16 %7 = LOAD %8
      I16 %6 = SUB %7, I16 1
      JCC %0 AE %6, $iftrue%0(), $endif%1()

    $iftrue%0():
      RET I8 0

    $endif%1():
      I32 %15 = ADD %region, I32 4
      I16 %14 = LOAD %15
      I16 %13 = SUB %14, I16 1
      I32 %21 = ADD %region, I32 2
      I8 %20 = LOAD %21
      I16 %19 = ZX %20
      I16 %18 = ADD %19, I16 1
      I16 %last_line_i%12 = MULU %13, %18
      JMP $forinit%3()

    $forinit%3():
      JMP $forcond%4(%x%26 = I8 0)

    $forcond%4(I8 %x%26):
      I32 %28 = ADD %region, I32 2
      I8 %27 = LOAD %28
      JCC %x%26 B %27, $fortrue%5(), $fordone%7()

    $fortrue%5():
      I32 %34 = ADD %region, I32 12
      I32 %33 = LOAD %34
      I16 %39 = ZX %x%26
      I16 %36 = ADD %last_line_i%12, %39
      I32 %41 = ZX %36
      I32 %32 = ADD %33, %41
      I8 %31 = LOAD %32
      JCC %31 NE I8 32, $iftrue%8(), $endif%9()

    $iftrue%8():
      RET I8 0

    $endif%9():
      JMP $forupd%6()

    $forupd%6():
      I8 %x%44 = ADD %x%26, I8 1
      JMP $forcond%4(%x%26 = %x%44)

    $fordone%7():
      I16 %start_i%47 = CALLR @get_index_of(%x = I8 0, %y = %start_y, %region = %region)
      I32 %56 = ADD %region, I32 2
      I8 %55 = LOAD %56
      I16 %54 = ZX %55
      I16 %line_size%53 = ADD %54, I16 1
      JMP $forinit%11()

    $forinit%11():
      I16 %i%59 = SUB %last_line_i%12, %line_size%53
      JMP $forcond%12(%i%63 = %i%59)

    $forcond%12(I16 %i%63):
      JCC %i%63 AE %start_i%47, $fortrue%13(), $fordone%15()

    $fortrue%13():
      I32 %69 = ADD %region, I32 12
      I32 %68 = LOAD %69
      I32 %72 = ZX %i%63
      I32 %67 = ADD %68, %72
      I32 %76 = ADD %region, I32 12
      I32 %75 = LOAD %76
      I16 %79 = ADD %i%63, %line_size%53
      I32 %78 = ZX %79
      I32 %74 = ADD %75, %78
      I32 %83 = ZX %line_size%53
      CALLN @_util.memcopy(%source = %67, %dest = %74, %length = %83)
      JMP $forupd%14()

    $forupd%14():
      I16 %i%85 = SUB %i%63, I16 1
      JMP $forcond%12(%i%63 = %i%85)

    $fordone%15():
      RET I8 1
  }
}
